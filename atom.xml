<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ahhahahhw</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-28T06:52:35.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ahhahahhw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue应用层</title>
    <link href="http://example.com/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://example.com/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2022-06-28T06:52:35.000Z</published>
    <updated>2022-06-28T06:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue应用层"><a href="#Vue应用层" class="headerlink" title="Vue应用层"></a>Vue应用层</h1><h2 id="1、MVC与MVVM"><a href="#1、MVC与MVVM" class="headerlink" title="1、MVC与MVVM"></a>1、MVC与MVVM</h2><p>MVC缺点：前后端无法独立开发，前端没有自己的数据中心，太过依赖于后台</p><p>MVVM（前后端分离）：前端有自己的视图控制器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、v-model的原理"><a href="#2、v-model的原理" class="headerlink" title="2、v-model的原理"></a>2、v-model的原理</h2><p>v-model表现形式是数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入电话&quot; v-model=&quot;tel&quot;/&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;tel&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;,</span><br><span class="line">tel:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、data-为什么是函数"><a href="#3、data-为什么是函数" class="headerlink" title="3、data()为什么是函数"></a>3、data()为什么是函数</h2><p>闭包，让每一个组件都有自己的私有作用域，确保各组件数据不会相互干扰，如果不用闭包的方法，采用纯对象的方法就会有干扰 &#x3D;&gt; let obj &#x3D; { }</p><h2 id="4、v-if与v-show"><a href="#4、v-if与v-show" class="headerlink" title="4、v-if与v-show"></a>4、v-if与v-show</h2><ul><li>v-if：不满足条件的话不会渲染dom，使用场景：单次判断，只需要判断一次</li><li>v-show的type只有true或false，它把display设置为none，它是隐藏dom，使用场景：多次切换，就不需要多次渲染，不会浪费性能，v-show不能用于权限操作</li></ul><h2 id="5、虚拟dom"><a href="#5、虚拟dom" class="headerlink" title="5、虚拟dom"></a>5、虚拟dom</h2><p>render负责把template里面的东西转化成真实dom<br>1.初始化的时候，将真实dom转化成虚拟dom<br>2.更新的时候做对比</p><ul><li>虚拟dom是在vue2.0中加入的</li><li>虚拟dom的本质就是一个js对象，它具备跨平台的特质</li></ul><p>vue的渲染过程：</p><ul><li><p>将真实dom转化成真实dom，也就是js对象</p></li><li><p>更新的时候用来做对比</p></li></ul><p><img src="/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/vue1.png"></p><p>虚拟dom是如何提升vue的渲染效率？</p><ul><li>组件化</li><li>数据驱动</li></ul><p>虚拟dom可以局部更新节点数据，从直接操作dom的地方拿到两个js对象中去做比较，通过两个对象的对比，找出差异项进行更新，损耗小，优化性能。</p><h2 id="6、diff-中的patch"><a href="#6、diff-中的patch" class="headerlink" title="6、diff()中的patch()"></a>6、diff()中的patch()</h2><p>vue的渲染有两条线：</p><p>1.初始化：patch(container,vnode)，将虚拟dom转化为真实dom</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function createElement(vnode)&#123;</span><br><span class="line">//虚拟dom生成的三要素：目标元素，属性，子节点，目标元素是不可或缺的</span><br><span class="line">let tag = vnode.tag//目标元素ul</span><br><span class="line">let attrs = vnode.attrs || &#123;&#125;//属性</span><br><span class="line">let children = vnode.children || []//子节点</span><br><span class="line"></span><br><span class="line">if(!tag) &#123;</span><br><span class="line">retun null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建对应的dom</span><br><span class="line">let elem = document.createElement(tag)</span><br><span class="line">let attrName</span><br><span class="line">//给dom添加属性</span><br><span class="line">for(attrName in attrs)&#123;</span><br><span class="line">if(attrs.hasOwnProperty(attrName))&#123;</span><br><span class="line">elem.setAttribute(attrName,attrs[attrName])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将子元素添加到目标之上</span><br><span class="line">children.forEach(function(childVnode)&#123;</span><br><span class="line">elem.appendChild(createElement(childVnode))</span><br><span class="line">&#125;);</span><br><span class="line">return elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.更新：update(vnode,newVnode)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateChildren(vnode,newVnode) &#123;</span><br><span class="line">let children = vnode.cildren || []//现有节点</span><br><span class="line">let newChildren = newVnode.children || []//新节点</span><br><span class="line">children.forEach(function(childrenVnode,index)&#123;</span><br><span class="line">//循环每一项，通过index将新老节点进行对换</span><br><span class="line">let newChildrenVnode = newChildren[index]</span><br><span class="line">//如果第一层tag没有变化</span><br><span class="line">if(childrenVnode.tag === newChildrenVnode.tag)&#123;</span><br><span class="line">//继续进行深层次的对比，通过递归去比较</span><br><span class="line">updateChildren(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//将childrenVnode替换成newChildrenVnode</span><br><span class="line">replaceNode(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue应用层&quot;&gt;&lt;a href=&quot;#Vue应用层&quot; class=&quot;headerlink&quot; title=&quot;Vue应用层&quot;&gt;&lt;/a&gt;Vue应用层&lt;/h1&gt;&lt;h2 id=&quot;1、MVC与MVVM&quot;&gt;&lt;a href=&quot;#1、MVC与MVVM&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6相关面试题</title>
    <link href="http://example.com/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-06-28T04:34:26.000Z</published>
    <updated>2022-06-28T04:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6相关面试题"><a href="#ES6相关面试题" class="headerlink" title="ES6相关面试题"></a>ES6相关面试题</h1><h2 id="1、varconstlet"><a href="#1、varconstlet" class="headerlink" title="1、varconstlet"></a>1、varconstlet</h2><h3 id="var存在的问题"><a href="#var存在的问题" class="headerlink" title="var存在的问题"></a>var存在的问题</h3><ul><li>声明提升</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//var是先使用后定义</span><br><span class="line">console.log(num)//undefined</span><br><span class="line">var num = 123</span><br></pre></td></tr></table></figure><ul><li>变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num1 = 12</span><br><span class="line">var num1 = 34</span><br><span class="line">console.log(num1)//34</span><br></pre></td></tr></table></figure><ul><li>没有块级作用域</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn2() &#123;</span><br><span class="line">for(var i = 0;i &lt; 3;i++)&#123;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const定义的变量不能被修改，否则会报错</li><li>声明之后必须赋值，否则会报错</li><li>支持块级作用域，不存在声明提升和变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const DEMO = 123</span><br><span class="line">DEMO = 456</span><br><span class="line">console.log(DEMO)//报错</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let支持块级作用域，不存在声明提升和变量覆盖</li><li>定义的变量可以被修改</li><li>声明之后可以不赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//运用解构的方式互换两个值</span><br><span class="line">let a = 1;</span><br><span class="line">let b = 2;</span><br><span class="line">[a,b] = [b,a]</span><br><span class="line">console.log(a,b)//2,1</span><br></pre></td></tr></table></figure><h3 id="2、数组去重"><a href="#2、数组去重" class="headerlink" title="2、数组去重"></a>2、数组去重</h3><ul><li>indexOf循环去重</li><li>ES6 set去重：Array.from(new set(array))</li><li>Object键值对去重：把数组的值存在Object的key值，比如Object[value1] &#x3D; true，在判断另一个值的时候，如果Object[value2]存在的话，就说明该值是重复的。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [12,43,23,12,43,55]</span><br><span class="line">let item = [...new Set(arr)]</span><br><span class="line">console.log(item)</span><br></pre></td></tr></table></figure><h3 id="3、promise的原理"><a href="#3、promise的原理" class="headerlink" title="3、promise的原理"></a>3、promise的原理</h3><ul><li>promise 对象的，目的是为异步编程提供统一接口。每一个异步任务返回一个 promise 对象，该对象有一个 then 方法，允许指定回调函数。</li><li>一个promise 可能有三种状态:等待、已完成、已拒绝。</li><li>promise 必须实现 then 方法，而且then 必须返回一个promise，同一个 promise 的 then 可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致。</li><li>then 方法接受两个参数，第一个参数是成功时的回调，在 promise 由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在 promise 由“等待”态转换到“拒绝”态时调用。同时，then 可以接受另一个promise 传入，也接受一个“类then”的对象或方法，即 thenable 对象。</li><li>promise的构造函数是同步执行的，.then()方法是异步执行的</li><li>如果没有promise的话，可以用回调函数代替</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">console.log(1)</span><br><span class="line">resolve();</span><br><span class="line">console.log(2)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">console.log(3)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br><span class="line">//1,2,4,3</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6相关面试题&quot;&gt;&lt;a href=&quot;#ES6相关面试题&quot; class=&quot;headerlink&quot; title=&quot;ES6相关面试题&quot;&gt;&lt;/a&gt;ES6相关面试题&lt;/h1&gt;&lt;h2 id=&quot;1、varconstlet&quot;&gt;&lt;a href=&quot;#1、varconstlet&quot; c</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="ES6面试题" scheme="http://example.com/tags/ES6%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JS面试题</title>
    <link href="http://example.com/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-06-27T19:11:57.000Z</published>
    <updated>2022-06-27T19:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、原型与原型链"><a href="#1、原型与原型链" class="headerlink" title="1、原型与原型链"></a>1、原型与原型链</h2><p>原型prototype，原型链_proto_ &#x3D;&gt; [[prototype]]</p><p>常规的数组或对象是没有原型的，原型是函数（function）所特有的；原型链是大家都有的。</p><p>原型链的查找规则（就近原则）：从当前实例属性去查找，如果找到了就返回，否则顺着原型链一层一层往上找，直到找到null为止，如果找到null都没有找到，就会报错。</p><p><img src="/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/Users\22253\AppData\Roaming\Typora\typora-user-images\image-20220628003623431.png" alt="image-20220628003623431"></p><h2 id="二、JS防抖与节流"><a href="#二、JS防抖与节流" class="headerlink" title="二、JS防抖与节流"></a>二、JS防抖与节流</h2><p>1、防抖：可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p><p>​应用场景：文本框实时查询输入的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait, immediate) &#123;</span><br><span class="line">    // 定时器变量</span><br><span class="line">    var timeout;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        // 每次触发 scroll handler 时先清除定时器</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        // 指定 xx ms 后触发真正想进行的操作 handler</span><br><span class="line">        timeout = setTimeout(func, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// 实际想绑定在 scroll 事件上的 handler</span><br><span class="line">function realFunc()&#123;</span><br><span class="line">    console.log(&quot;Success&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 采用了防抖动</span><br><span class="line">window.addEventListener(&#x27;scroll&#x27;,debounce(realFunc,500));</span><br><span class="line">// 没采用防抖动</span><br><span class="line">window.addEventListener(&#x27;scroll&#x27;,realFunc);</span><br></pre></td></tr></table></figure><p>2、节流：只允许一个函数在 X 毫秒内执行一次，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。</p><p>防抖函数确实不错，但是也存在问题，譬如图片的懒加载，我希望在下滑过程中图片不断的被加载出来，而不是只有当我停止下滑时候，图片才被加载出来。又或者下滑时候的数据的 ajax 请求加载也是同理。</p><p>这个时候，就要用到另一种技巧，称为节流函数。节流函数，只允许一个函数在 X 毫秒内执行一次。与防抖相比，节流函数最主要的不同在于它保证在 X 毫秒内至少执行一次我们希望触发的事件 handler。与防抖相比，节流函数多了一个 mustRun 属性，代表 mustRun 毫秒内，必然会触发一次 handler。</p><p>​应用场景：提交表单，高频监听事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function throttle(func, wait, mustRun) &#123;</span><br><span class="line">    var timeout,</span><br><span class="line">        startTime = new Date();</span><br><span class="line"> </span><br><span class="line">    return function() &#123;</span><br><span class="line">        var context = this,</span><br><span class="line">            args = arguments,</span><br><span class="line">            curTime = new Date();</span><br><span class="line"> </span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        // 如果达到了规定的触发时间间隔，触发 handler</span><br><span class="line">        if(curTime - startTime &gt;= mustRun)&#123;</span><br><span class="line">            func.apply(context,args);</span><br><span class="line">            startTime = curTime;</span><br><span class="line">        // 没达到触发间隔，重新设定定时器</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            timeout = setTimeout(func, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">// 实际想绑定在 scroll 事件上的 handler</span><br><span class="line">function realFunc()&#123;</span><br><span class="line">    console.log(&quot;Success&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 采用了节流函数</span><br><span class="line">window.addEventListener(&#x27;scroll&#x27;,throttle(realFunc,500,1000));</span><br></pre></td></tr></table></figure><h2 id="三、JS闭包"><a href="#三、JS闭包" class="headerlink" title="三、JS闭包"></a>三、JS闭包</h2><p>1、什么是闭包:<br>        闭包是指有权访问另外一个函数作用域中的变量的函数。闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在，闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。当在一个函数内定义另外一个函数就会产生闭包。</p><p>2、为什么要用？</p><ul><li>匿名自执行函数：我们知道所有的变量，如果不加上var 关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如:别的函数可能误用这些变量:造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。除了每次使用变量都是用 var 关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，可以用闭包。</li><li>结果缓存：我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个承数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留。封装:实现类和继承等。</li></ul><p>闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">let a1 = 1;</span><br><span class="line">return function()&#123;</span><br><span class="line">return a1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、闭包存在的意义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//作用域链</span><br><span class="line">let name = &quot;小明&quot;</span><br><span class="line">function fn2()&#123;</span><br><span class="line">let name = &quot;小白&quot;</span><br><span class="line">function fn3()&#123;</span><br><span class="line">let name = &quot;小红&quot;</span><br><span class="line">console.log(name)</span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><p>3.1 延长变量的生命周期</p><p>闭包会常驻内存 &#x3D;&gt; 慎用闭包，闭包的变量不会被回收</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//沟通内外部方法桥梁</span><br><span class="line">function outer() &#123;</span><br><span class="line">let a1 = 111;</span><br><span class="line">let a2 = 222;</span><br><span class="line">return function inner()&#123;</span><br><span class="line">return a1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn5() &#123;</span><br><span class="line">let getInnerData = outer();</span><br><span class="line">console.dir(getInnerData)</span><br><span class="line">&#125;</span><br><span class="line">fn5();</span><br></pre></td></tr></table></figure><p>3.2 创建私有环境</p><p>每一个闭包都拥有各自的属性和方法，都有独立的词法作用域，保持各自的独立性，这也诠释面向对象编程的好处–数据的隐藏和封装。</p><p>Vue data()为什么是一个函数？&#x3D;&gt; 闭包，不用闭包会使各个环境的数据相互干扰</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建计数器</span><br><span class="line">let makeCounter = function () &#123;</span><br><span class="line">let num = 0;</span><br><span class="line">function changeBy(val) &#123;</span><br><span class="line">num += val</span><br><span class="line">&#125;</span><br><span class="line">// 调用返回出去的方法</span><br><span class="line">return &#123;</span><br><span class="line">add: function()&#123;</span><br><span class="line">changeBy(1)</span><br><span class="line">&#125;,</span><br><span class="line">reduce: function() &#123;</span><br><span class="line">changeBy(-1)</span><br><span class="line">&#125;,</span><br><span class="line">value: function() &#123;</span><br><span class="line">return num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let counter1 = makeCounter()</span><br><span class="line">let counter2 = makeCounter()</span><br><span class="line"></span><br><span class="line">counter1.add()</span><br><span class="line">counter1.add()</span><br><span class="line"></span><br><span class="line">counter2.add()</span><br><span class="line">console.log(counter2.value())//1</span><br><span class="line">console.log(counter1.value())//2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、原型与原型链&quot;&gt;&lt;a href=&quot;#1、原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;1、原型与原型链&quot;&gt;&lt;/a&gt;1、原型与原型链&lt;/h2&gt;&lt;p&gt;原型prototype，原型链_proto_ &amp;#x3D;&amp;gt; [[prototype]</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="JS面试题" scheme="http://example.com/tags/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>newpapername修改内容</title>
    <link href="http://example.com/2022/06/09/newpapername/"/>
    <id>http://example.com/2022/06/09/newpapername/</id>
    <published>2022-06-09T00:32:54.000Z</published>
    <updated>2022-06-27T17:34:42.595Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加常用控件</span><br><span class="line">map.addControl(new BMap.ZoomControl());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决脚手架中全局变量访问的问题</span><br><span class="line">const BMap = window.BMapGL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取当前被点击项</span><br><span class="line">const target = e.domEvent.changedTouches[0];</span><br></pre></td></tr></table></figure><p>FilterMore 的 css 文件中</p><p>将 bottom：0px 改为 50px</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.footer &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 80px;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 50px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  z-index: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; BASE_URL &#125; from &quot;../../utils&quot;;</span><br><span class="line"></span><br><span class="line">import NavHeader from &quot;../../components/NavHeader&quot;;</span><br><span class="line">import HouseItem from &quot;../../components/HouseItem&quot;;</span><br><span class="line"></span><br><span class="line">import styles from &quot;./index.module.css&quot;;</span><br><span class="line"></span><br><span class="line">export default class Rent extends Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    // 出租房屋列表</span><br><span class="line">    list: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // // 获取已发布房源的列表数据</span><br><span class="line">  // async getHouseList() &#123;</span><br><span class="line">  //     const res = await API.get(&#x27;/user/houses&#x27;)</span><br><span class="line"></span><br><span class="line">  //     const &#123; status, body &#125; = res.data</span><br><span class="line">  //     if (status === 200) &#123;</span><br><span class="line">  //         this.setState(&#123;</span><br><span class="line">  //             list: body</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125; else &#123;</span><br><span class="line">  //         const &#123; history, location &#125; = this.props</span><br><span class="line">  //         history.replace(&#x27;/login&#x27;, &#123;</span><br><span class="line">  //             from: location</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">  // 获取最新资讯</span><br><span class="line">  async getNews() &#123;</span><br><span class="line">    const res = await axios.get(</span><br><span class="line">      &quot;http://localhost:8080/home/news?area=AREA%7C88cff55c-aaa4-e2e0&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      news: res.data.body,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  async componentDidMount() &#123;</span><br><span class="line">    this.getNews();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderHouseItem() &#123;</span><br><span class="line">    const &#123; list &#125; = this.state;</span><br><span class="line">    const &#123; history &#125; = this.props;</span><br><span class="line"></span><br><span class="line">    return list.map((item) =&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;HouseItem</span><br><span class="line">          key=&#123;item.houseCode&#125;</span><br><span class="line">          onClick=&#123;() =&gt; history.push(`/detail/$&#123;item.houseCode&#125;`)&#125;</span><br><span class="line">          src=&#123;BASE_URL + item.houseImg&#125;</span><br><span class="line">          title=&#123;item.title&#125;</span><br><span class="line">          desc=&#123;item.desc&#125;</span><br><span class="line">          tags=&#123;item.tags&#125;</span><br><span class="line">          price=&#123;item.price&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderRentList() &#123;</span><br><span class="line">    return &lt;div className=&#123;styles.houses&#125;&gt;&#123;this.renderHouseItem()&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&#123;styles.root&#125;&gt;</span><br><span class="line">        &lt;NavHeader&gt;资讯&lt;/NavHeader&gt;</span><br><span class="line"></span><br><span class="line">        &#123;this.renderRentList()&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 添加常用控件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.addContro</summary>
      
    
    
    
    <category term="新闻发布后台管理系统" scheme="http://example.com/categories/%E6%96%B0%E9%97%BB%E5%8F%91%E5%B8%83%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
</feed>
