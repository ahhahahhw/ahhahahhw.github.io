<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ahhahahhw</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-18T04:15:57.491Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ahhahahhw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>17_收集表单数据</title>
    <link href="http://example.com/2022/07/18/17-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/07/18/17-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</id>
    <published>2022-07-18T04:14:00.000Z</published>
    <updated>2022-07-18T04:15:57.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h1><p>收集表单数据：</p><p>​1.若：<input type="text">，则v-model收集的是value值，用户输入的就是value值。</p><p>​2.若：<input type="radio">，则v-model收集的是value值，且要给标签配置value值。</p><p>​3.若：<input type="checkbox"></p><p>​（1）没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​（2）配置input的value属性:</p><p>​v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​v-model的初始值是数组，那么收集的的就是value组成的数组</p><p>​4.v-model的三个修饰符：</p><p>​lazy：失去焦点再收集数据</p><p>​number：输入字符串转为有效的数字</p><p>​trim：输入首尾空格过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;form @submit.prevent=&quot;demo&quot;&gt;</span><br><span class="line">账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">性别：</span><br><span class="line">男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;</span><br><span class="line">女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">爱好：</span><br><span class="line">学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;</span><br><span class="line">打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;</span><br><span class="line">吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">所属校区</span><br><span class="line">&lt;select v-model=&quot;userInfo.city&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">其他信息：</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">userInfo:&#123;</span><br><span class="line">account:&#x27;&#x27;,</span><br><span class="line">password:&#x27;&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">sex:&#x27;female&#x27;,</span><br><span class="line">hobby:[],</span><br><span class="line">city:&#x27;beijing&#x27;,</span><br><span class="line">other:&#x27;&#x27;,</span><br><span class="line">agree:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">demo()&#123;</span><br><span class="line">console.log(JSON.stringify(this.userInfo))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;收集表单数据&quot;&gt;&lt;a href=&quot;#收集表单数据&quot; class=&quot;headerlink&quot; title=&quot;收集表单数据&quot;&gt;&lt;/a&gt;收集表单数据&lt;/h1&gt;&lt;p&gt;收集表单数据：&lt;/p&gt;
&lt;p&gt;​	1.若：&lt;input type=&quot;text&quot;&gt;，则v-model收集的是v</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>16_Vue数据监测</title>
    <link href="http://example.com/2022/07/18/16-Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/"/>
    <id>http://example.com/2022/07/18/16-Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</id>
    <published>2022-07-18T04:13:41.000Z</published>
    <updated>2022-07-18T04:13:42.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue数据监测"><a href="#Vue数据监测" class="headerlink" title="Vue数据监测"></a>Vue数据监测</h1><p>Vue监视数据的原理：</p><p>  1.vue会监视data中所有层次的数据。</p><p>  2.如何监测对象中的数据？</p><p>​通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​（1）对象中后追加的属性，Vue默认不做响应式处理</p><p>​（2）如需给后添加的属性做响应式，请使用如下API：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.set(target，propertyName/index，value) 或 </span><br><span class="line"></span><br><span class="line">vm.$set(target，propertyName/index，value)</span><br></pre></td></tr></table></figure><p>  3.如何监测数组中的数据？</p><p>​通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​（1）调用原生对应的方法对数组进行更新。</p><p>​（2）重新解析模板，进而更新页面。</p><p>  4.在Vue修改数组中的某个元素一定要用如下方法：</p><p>​（1）使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​（2）Vue.set() 或 vm.$set()</p><p>​        特别注意：Vue.set()和vm.$set()不能给vm或vm的根数据对象添加属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;student.sex = &#x27;未知&#x27; &quot;&gt;修改性别&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;爱好：&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;h&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;h3&gt;朋友们：&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            student: &#123;</span><br><span class="line">                name: &#x27;tom&#x27;,</span><br><span class="line">                age: 18,</span><br><span class="line">                hobby: [&#x27;抽烟&#x27;, &#x27;喝酒&#x27;, &#x27;烫头&#x27;],</span><br><span class="line">                friends: [&#123;</span><br><span class="line">                        name: &#x27;jerry&#x27;,</span><br><span class="line">                        age: 35</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;tony&#x27;,</span><br><span class="line">                        age: 36</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            addSex() &#123;</span><br><span class="line">                // Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">                this.$set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            addFriend() &#123;</span><br><span class="line">                this.student.friends.unshift(&#123;</span><br><span class="line">                    name: &#x27;jack&#x27;,</span><br><span class="line">                    age: 70</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            updateFirstFriendName() &#123;</span><br><span class="line">                this.student.friends[0].name = &#x27;张三&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            addHobby() &#123;</span><br><span class="line">                this.student.hobby.push(&#x27;学习&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            updateHobby() &#123;</span><br><span class="line">                // this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span><br><span class="line">                // Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="line">                this.$set(this.student.hobby, 0, &#x27;开车&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            removeSmoke() &#123;</span><br><span class="line">                this.student.hobby = this.student.hobby.filter((h) =&gt; &#123;</span><br><span class="line">                    return h !== &#x27;抽烟&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue数据监测&quot;&gt;&lt;a href=&quot;#Vue数据监测&quot; class=&quot;headerlink&quot; title=&quot;Vue数据监测&quot;&gt;&lt;/a&gt;Vue数据监测&lt;/h1&gt;&lt;p&gt;Vue监视数据的原理：&lt;/p&gt;
&lt;p&gt;  1.vue会监视data中所有层次的数据。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>15_key作用与原理</title>
    <link href="http://example.com/2022/07/18/15-key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/07/18/15-key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-18T04:13:00.000Z</published>
    <updated>2022-07-18T04:13:01.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="key作用与原理"><a href="#key作用与原理" class="headerlink" title="key作用与原理"></a>key作用与原理</h1><p>面试题：react、vue中的key有什么作用？（key的内部原理）</p><p>​1.虚拟DOM中key的作用：</p><p>​key是虚拟DOM对象的标识，当状态中的数据发生变化时，vue会根据【新数据】生成【新的虚拟DOM】</p><p>随后vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><p>​2.对比规则：</p><p>​（1）旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​                 ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p><p>​                 ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​（2）旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到到页面。</p><p>​     3. 用index作为key可能会引发的问题：</p><p>​（1） 若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p><p>​（2） 如果结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p><p>​4.开发中如何选择key?</p><p>​（1）最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p><p>​（2）如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示， 使用index作为key是没有问题的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 遍历数组 --&gt;</span><br><span class="line">        &lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">        &lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">                &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                persons: [&#123;</span><br><span class="line">                        id: &#x27;001&#x27;,</span><br><span class="line">                        name: &#x27;张三&#x27;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;002&#x27;,</span><br><span class="line">                        name: &#x27;李四&#x27;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;003&#x27;,</span><br><span class="line">                        name: &#x27;王五&#x27;,</span><br><span class="line">                        age: 20</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                add() &#123;</span><br><span class="line">                    const p = &#123;</span><br><span class="line">                        id: &#x27;004&#x27;,</span><br><span class="line">                        name: &#x27;老刘&#x27;,</span><br><span class="line">                        age: 40</span><br><span class="line">                    &#125;</span><br><span class="line">                    this.persons.unshift(p)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;key作用与原理&quot;&gt;&lt;a href=&quot;#key作用与原理&quot; class=&quot;headerlink&quot; title=&quot;key作用与原理&quot;&gt;&lt;/a&gt;key作用与原理&lt;/h1&gt;&lt;p&gt;面试题：react、vue中的key有什么作用？（key的内部原理）&lt;/p&gt;
&lt;p&gt;​	1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>14_基本列表</title>
    <link href="http://example.com/2022/07/18/14-%E5%9F%BA%E6%9C%AC%E5%88%97%E8%A1%A8/"/>
    <id>http://example.com/2022/07/18/14-%E5%9F%BA%E6%9C%AC%E5%88%97%E8%A1%A8/</id>
    <published>2022-07-18T04:12:18.000Z</published>
    <updated>2022-07-18T04:12:19.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h1><p>v-for指令：</p><p>​1.用于展示列表数据</p><p>​2.语法：v-for&#x3D;”(item,index) in xxx” :key&#x3D;”yyy”</p><p>​3.可遍历：数组、对象、字符串、指定次数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 遍历数组 --&gt;</span><br><span class="line">        &lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历对象 --&gt;</span><br><span class="line">        &lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(value,k) of car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">                &#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历字符串 --&gt;</span><br><span class="line">        &lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(char,index) of str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">        &lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(number,index) of 5&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                persons: [&#123;</span><br><span class="line">                        id: &#x27;001&#x27;,</span><br><span class="line">                        name: &#x27;张三&#x27;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;002&#x27;,</span><br><span class="line">                        name: &#x27;李四&#x27;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;003&#x27;,</span><br><span class="line">                        name: &#x27;王五&#x27;,</span><br><span class="line">                        age: 20</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                car: &#123;</span><br><span class="line">                    name: &#x27;奥迪A8&#x27;,</span><br><span class="line">                    price: &#x27;70万&#x27;,</span><br><span class="line">                    color: &#x27;黑色&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                str: &#x27;hello&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本列表&quot;&gt;&lt;a href=&quot;#基本列表&quot; class=&quot;headerlink&quot; title=&quot;基本列表&quot;&gt;&lt;/a&gt;基本列表&lt;/h1&gt;&lt;p&gt;v-for指令：&lt;/p&gt;
&lt;p&gt;​	1.用于展示列表数据&lt;/p&gt;
&lt;p&gt;​	2.语法：v-for&amp;#x3D;”(item,i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>13_条件渲染</title>
    <link href="http://example.com/2022/07/13/13-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2022/07/13/13-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</id>
    <published>2022-07-12T18:58:46.000Z</published>
    <updated>2022-07-12T18:58:47.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p>1.v-if</p><p>​写法：</p><p>​（1）v-if&#x3D;”xxx”</p><p>​（2）v-else-if&#x3D;”xxx”</p><p>​（3）v-else&#x3D;”xxx”</p><p>​适用于：切换频率较低的场景</p><p>​特点：不展示的DOM原始直接被移除</p><p>​注意：v-if可以和v-else-if、v-else一起使用，但要求结构不能被打断</p><p>2.v-show</p><p>​写法：v-show&#x3D;”xxx”</p><p>​适用于：切换频率较高的场景</p><p>​特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p><p>3.备注：使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用v-if做条件渲染 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-else和v-else-if --&gt;</span><br><span class="line">        &lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-if与template的配合使用 --&gt;</span><br><span class="line">        &lt;template v-if=&quot;n === 1&quot;&gt;</span><br><span class="line">            &lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;北京&lt;/h2&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            n: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h1&gt;&lt;p&gt;1.v-if&lt;/p&gt;
&lt;p&gt;​	写法：&lt;/p&gt;
&lt;p&gt;​		（1）v-if&amp;#x3D;”xxx”&lt;/p&gt;
&lt;p&gt;​		（2）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>12_绑定样式</title>
    <link href="http://example.com/2022/07/13/12-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
    <id>http://example.com/2022/07/13/12-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-07-12T18:58:25.000Z</published>
    <updated>2022-07-12T18:58:25.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h1><p>绑定样式：</p><p>​1.class样式</p><p>​写法：class&#x3D;”xxx” xxx可以是字符串、对象、数组</p><p>​（1）字符串写法适用于：类名不确定，要动态获取</p><p>​（2）对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</p><p>​（3）数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</p><p>​2.style样式</p><p>​（1）:style&#x3D;”{fontSize:xxx}”其中xxx是动态值</p><p>​（2）:style&#x3D;”[a,b]”其中a、b是样式对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .basic &#123;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .happy &#123;</span><br><span class="line">            border: 4px solid red;</span><br><span class="line">            ;</span><br><span class="line">            background-color: rgba(255, 255, 0, 0.644);</span><br><span class="line">            background: linear-gradient(30deg, yellow, pink, orange, yellow);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .sad &#123;</span><br><span class="line">            border: 4px dashed rgb(2, 197, 2);</span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .normal &#123;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu1 &#123;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu2 &#123;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            text-shadow: 2px 2px 10px red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu3 &#123;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        &lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            mood: &#x27;normal&#x27;,</span><br><span class="line">            classArr: [&#x27;atguigu1&#x27;, &#x27;atguigu2&#x27;, &#x27;atguigu3&#x27;],</span><br><span class="line">            classObj: &#123;</span><br><span class="line">                atguigu1: false,</span><br><span class="line">                atguigu2: false,</span><br><span class="line">            &#125;,</span><br><span class="line">            styleObj: &#123;</span><br><span class="line">                fontSize: &#x27;40px&#x27;,</span><br><span class="line">                color: &#x27;red&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            styleObj2: &#123;</span><br><span class="line">                backgroundColor: &#x27;orange&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            styleArr: [&#123;</span><br><span class="line">                    fontSize: &#x27;40px&#x27;,</span><br><span class="line">                    color: &#x27;blue&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    backgroundColor: &#x27;gray&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMood() &#123;</span><br><span class="line">                const arr = [&#x27;happy&#x27;, &#x27;sad&#x27;, &#x27;normal&#x27;]</span><br><span class="line">                const index = Math.floor(Math.random() * 3)</span><br><span class="line">                this.mood = arr[index]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绑定样式&quot;&gt;&lt;a href=&quot;#绑定样式&quot; class=&quot;headerlink&quot; title=&quot;绑定样式&quot;&gt;&lt;/a&gt;绑定样式&lt;/h1&gt;&lt;p&gt;绑定样式：&lt;/p&gt;
&lt;p&gt;​	1.class样式&lt;/p&gt;
&lt;p&gt;​		写法：class&amp;#x3D;”xxx” xxx可以是字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>11_天气案例-侦听属性</title>
    <link href="http://example.com/2022/07/13/11-%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2022/07/13/11-%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-12T18:57:52.000Z</published>
    <updated>2022-07-12T18:57:52.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h1><p>监视属性watch：</p><p>​1.当被监视的属性变化时，回调函数自动调用，进行相关操作</p><p>​2.监视的属性必须存在才能进行监视</p><p>​3.监视的两种写法：</p><p>​（1）new Vue时传入watch配置</p><p>​（2）通过vm.$watch监视</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // new Vue时传入watch配置</span><br><span class="line">        watch:&#123;</span><br><span class="line">            isHot:&#123;</span><br><span class="line">                immediate:true,</span><br><span class="line">                handler(oldValue,newValue)&#123;</span><br><span class="line">                    console.log(oldValue,newValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    // 通过vm.$watch监视</span><br><span class="line">     vm.$watch(&#x27;isHot&#x27;, &#123;</span><br><span class="line">         immediate: true, //初始化时让handler调用一下</span><br><span class="line">         //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">         handler(newValue, oldValue) &#123;</span><br><span class="line">             console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4.深度监视：</p><p>​（1）Vue中的watch默认不监测对象内部值的改变（一层）</p><p>​（2）配置deep:true可以监测对象内部值改变（多层）</p><p>​5.备注：</p><p>​（1）Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</p><p>​（2）使用watch时根据数据的具体结构，决定是否采用深度监视</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;numbers.a++&quot;&gt;点我让a+1&lt;/button&gt;</span><br><span class="line">        &lt;h3&gt;b的值是:&#123;&#123;numbers.b&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;numbers.b++&quot;&gt;点我让b+1&lt;/button&gt;</span><br><span class="line">        &#123;&#123;numbers.c.d.e&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">            numbers: &#123;</span><br><span class="line">                a: 1,</span><br><span class="line">                b: 1,</span><br><span class="line">                c: &#123;</span><br><span class="line">                    d: &#123;</span><br><span class="line">                        e: 100</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            isHot: &#123;</span><br><span class="line">                //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">                handler(newValue, oldValue) &#123;</span><br><span class="line">                    console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //监视多级结构中所有属性的变化</span><br><span class="line">            numbers: &#123;</span><br><span class="line">                deep: true,</span><br><span class="line">                handler() &#123;</span><br><span class="line">                    console.log(&#x27;numbers改变了&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            //简写</span><br><span class="line">            /* isHot(newValue,oldValue)&#123;</span><br><span class="line">            console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">            &#125; */</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">//简写</span><br><span class="line">    /* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">    &#125;) */</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>6.computed与watch之间的区别：</p><p>​（1）computed能完成的功能，watch都可以完成</p><p>​（2）watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</p><p>​7.两个原则：</p><p>​（1）所有被Vue管理的函数，最好写成普通函数，这样this指向才是vm或组件实例对象</p><p>​（2）所有不被Vue管理的函数（定时器回调函数、ajax的回调函数等、promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">            fullName: &#x27;张-三&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            firstName(val) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(this)</span><br><span class="line">                    this.fullName = val + &#x27;-&#x27; + this.lastName</span><br><span class="line">                &#125;, 1000);</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName(val) &#123;</span><br><span class="line">                this.fullName = this.firstName + &#x27;-&#x27; + val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;侦听属性&quot;&gt;&lt;a href=&quot;#侦听属性&quot; class=&quot;headerlink&quot; title=&quot;侦听属性&quot;&gt;&lt;/a&gt;侦听属性&lt;/h1&gt;&lt;p&gt;监视属性watch：&lt;/p&gt;
&lt;p&gt;​	1.当被监视的属性变化时，回调函数自动调用，进行相关操作&lt;/p&gt;
&lt;p&gt;​	2.监视</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>10_姓名案例-计算属性</title>
    <link href="http://example.com/2022/07/13/10-%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2022/07/13/10-%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-12T18:57:16.000Z</published>
    <updated>2022-07-12T18:57:17.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="姓名案例-计算属性"><a href="#姓名案例-计算属性" class="headerlink" title="姓名案例-计算属性"></a>姓名案例-计算属性</h1><p>计算属性：</p><p>​1.定义：要用的属性不存在，要通过已有属性计算得来</p><p>​2.原理：底层借助了Object.defineproperty方法提供的getter和setter</p><p>​3.get函数什么时候执行？</p><p>​（1）初次读取时会执行一次</p><p>​（2）当依赖的数据发生改变时会被再次调用</p><p>​4.get有什么作用？</p><p>​当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</p><p>​5.优势：与methods实现相比，内部有缓存机制（备用），效率更高，调试方便</p><p>​6.备注：</p><p>​（1）计算属性最终会出现在vm上，直接读取使用即可</p><p>​（2）如果计算属性要被修改，那必须写set函数响应修改，且set中要引起计算时依赖的数据发生改变。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        //完整写法</span><br><span class="line">        computed: &#123;</span><br><span class="line">            fullName:&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">            console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">            return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">            console.log(&#x27;set&#x27;,value)</span><br><span class="line">            const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">            this.firstName = arr[0]</span><br><span class="line">            this.lastName = arr[1]</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">        //简写</span><br><span class="line">            fullName() &#123;</span><br><span class="line">                return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;姓名案例-计算属性&quot;&gt;&lt;a href=&quot;#姓名案例-计算属性&quot; class=&quot;headerlink&quot; title=&quot;姓名案例-计算属性&quot;&gt;&lt;/a&gt;姓名案例-计算属性&lt;/h1&gt;&lt;p&gt;计算属性：&lt;/p&gt;
&lt;p&gt;​	1.定义：要用的属性不存在，要通过已有属性计算得来&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>09_键盘事件</title>
    <link href="http://example.com/2022/07/13/09-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2022/07/13/09-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-07-12T18:56:31.000Z</published>
    <updated>2022-07-12T18:56:32.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><p>1.Vue中常用的按键别名：</p><ul><li>回车 &#x3D;&gt; enter</li><li>删除 &#x3D;&gt; delete（捕获“删除”和“退格”键）</li><li>退出 &#x3D;&gt; esc</li><li>空格 &#x3D;&gt; space</li><li>换行 &#x3D;&gt; tab（特殊，必须配合keydown去使用）</li><li>上 &#x3D;&gt; up</li><li>下 &#x3D;&gt; down</li><li>左 &#x3D;&gt; left</li><li>右 &#x3D;&gt; right</li></ul><p>2.vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合keydown使用：正常触发事件</li></ul><p>4.vue.config.keyCodes：自定义键名 &#x3D; 键码，可以去定制按键别名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keydown.huiche=&quot;showInfo&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">    Vue.config.keyCodes.huiche = 13 //定义了一个别名按键</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo(e) &#123;</span><br><span class="line">                // console.log(e.key,e.keyCode)</span><br><span class="line">                console.log(e.target.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;键盘事件&quot;&gt;&lt;a href=&quot;#键盘事件&quot; class=&quot;headerlink&quot; title=&quot;键盘事件&quot;&gt;&lt;/a&gt;键盘事件&lt;/h1&gt;&lt;p&gt;1.Vue中常用的按键别名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回车 &amp;#x3D;&amp;gt; enter&lt;/li&gt;
&lt;li&gt;删除 &amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>08_事件修饰符</title>
    <link href="http://example.com/2022/07/13/08-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://example.com/2022/07/13/08-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2022-07-12T18:56:05.000Z</published>
    <updated>2022-07-12T18:56:06.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p>Vue中的事件修饰符：</p><p>1.prevent：阻止默认事件（常用）</p><p>2.stop：阻止事件冒泡（常用）</p><p>3.once：事件只触发一次（常用）</p><p>4.capture：使用事件的捕获模式</p><p>5.self：只有event.target是当前操作的元素时才会触发事件</p><p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .demo1 &#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box1 &#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box2 &#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .list &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: peru;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件（常用） --&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 阻止事件冒泡（常用） --&gt;</span><br><span class="line">        &lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">            &lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">            &lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">        &lt;button @click.once=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用事件的捕获模式 --&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot; @click.capture=&quot;showMsg(1)&quot;&gt;</span><br><span class="line">            div1</span><br><span class="line">            &lt;div class=&quot;box2&quot; @click=&quot;showMsg(2)&quot;&gt;</span><br><span class="line">                div2</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br><span class="line">        &lt;div class=&quot;demo1&quot; @click.self=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="line">        &lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;</span><br><span class="line">            &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo(e) &#123;</span><br><span class="line">                alert(&#x27;同学你好！&#x27;)</span><br><span class="line">                // console.log(e.target)</span><br><span class="line">            &#125;,</span><br><span class="line">            showMsg(msg) &#123;</span><br><span class="line">                console.log(msg)</span><br><span class="line">            &#125;,</span><br><span class="line">            demo() &#123;</span><br><span class="line">                for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class="line">                    console.log(&#x27;#&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(&#x27;累坏了&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件修饰符&quot;&gt;&lt;a href=&quot;#事件修饰符&quot; class=&quot;headerlink&quot; title=&quot;事件修饰符&quot;&gt;&lt;/a&gt;事件修饰符&lt;/h1&gt;&lt;p&gt;Vue中的事件修饰符：&lt;/p&gt;
&lt;p&gt;1.prevent：阻止默认事件（常用）&lt;/p&gt;
&lt;p&gt;2.stop：阻止事件</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>07_事件的基本使用</title>
    <link href="http://example.com/2022/07/11/07-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/07/11/07-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-11T06:29:09.000Z</published>
    <updated>2022-07-11T06:29:09.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h1><p>事件的基本使用：</p><p>​1.使用v-on：xxx或@xxx绑定事件，其中xxx是事件名</p><p>​2.事件的回调需要配置在methods对象中，最终会在vm上</p><p>​3.methods中配置的函数，不要用箭头函数，否则this就不是vm了</p><p>​4.methods中配置的函数，都是被vue所管理的函数，this的指向是vm或组件实例对象</p><p>​5.@click&#x3D;”demo”和@click&#x3D;”demo($event)”效果一致，但后者可以传参</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span><br><span class="line">        &lt;button @click=&quot;showInfo1&quot;&gt;点我提示信息1（不传参）&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;showInfo2($event,66)&quot;&gt;点我提示信息2（传参）&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo1(event) &#123;</span><br><span class="line">                // console.log(event.target.innerText)</span><br><span class="line">                // console.log(this) //此处的this是vm</span><br><span class="line">                alert(&#x27;同学你好！&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            showInfo2(event, number) &#123;</span><br><span class="line">                console.log(event, number)</span><br><span class="line">                // console.log(event.target.innerText)</span><br><span class="line">                // console.log(this) //此处的this是vm</span><br><span class="line">                alert(&#x27;同学你好！！&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件的基本使用&quot;&gt;&lt;a href=&quot;#事件的基本使用&quot; class=&quot;headerlink&quot; title=&quot;事件的基本使用&quot;&gt;&lt;/a&gt;事件的基本使用&lt;/h1&gt;&lt;p&gt;事件的基本使用：&lt;/p&gt;
&lt;p&gt;​	1.使用v-on：xxx或@xxx绑定事件，其中xxx是事件名&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>06_Vue中的数据代理</title>
    <link href="http://example.com/2022/07/11/06-Vue%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/07/11/06-Vue%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</id>
    <published>2022-07-11T06:28:44.000Z</published>
    <updated>2022-07-11T06:28:44.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h1><p>1.vue中的数据代理：通过vm对象来代理data对象中属性的操作</p><p>2.Vue中数据代理的好处：更加方便的操作data中的数据</p><p>3.基本原理：</p><p>​通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>​为每一个添加到vm上的属性都指定一个getter&#x2F;setter。</p><p>​在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            address: &#x27;宏福科技园&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中的数据代理&quot;&gt;&lt;a href=&quot;#Vue中的数据代理&quot; class=&quot;headerlink&quot; title=&quot;Vue中的数据代理&quot;&gt;&lt;/a&gt;Vue中的数据代理&lt;/h1&gt;&lt;p&gt;1.vue中的数据代理：通过vm对象来代理data对象中属性的操作&lt;/p&gt;
&lt;p&gt;2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>05_回顾Object.defineProperty方法</title>
    <link href="http://example.com/2022/07/11/05-%E5%9B%9E%E9%A1%BEObject-defineProperty%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/07/11/05-%E5%9B%9E%E9%A1%BEObject-defineProperty%E6%96%B9%E6%B3%95/</id>
    <published>2022-07-11T06:28:23.000Z</published>
    <updated>2022-07-11T06:28:23.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Object-defineProperty方法"><a href="#回顾Object-defineProperty方法" class="headerlink" title="回顾Object.defineProperty方法"></a>回顾Object.defineProperty方法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let number = 18</span><br><span class="line">let person = &#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(person,&#x27;age&#x27;,&#123;</span><br><span class="line">// value:18,</span><br><span class="line">// enumerable:true, //控制属性是否可以枚举，默认值是false</span><br><span class="line">// writable:true, //控制属性是否可以被修改，默认值是false</span><br><span class="line">// configurable:true //控制属性是否可以被删除，默认值是false</span><br><span class="line"></span><br><span class="line">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;有人读取age属性了&#x27;)</span><br><span class="line">return number</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;有人修改了age属性，且值是&#x27;,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// console.log(Object.keys(person))</span><br><span class="line"></span><br><span class="line">console.log(person)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回顾Object-defineProperty方法&quot;&gt;&lt;a href=&quot;#回顾Object-defineProperty方法&quot; class=&quot;headerlink&quot; title=&quot;回顾Object.defineProperty方法&quot;&gt;&lt;/a&gt;回顾Object.de</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>04_理解MVVM</title>
    <link href="http://example.com/2022/07/11/04-%E7%90%86%E8%A7%A3MVVM/"/>
    <id>http://example.com/2022/07/11/04-%E7%90%86%E8%A7%A3MVVM/</id>
    <published>2022-07-11T06:27:46.000Z</published>
    <updated>2022-07-11T06:27:49.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解MVVM"><a href="#理解MVVM" class="headerlink" title="理解MVVM"></a>理解MVVM</h1><p>MVVM模型</p><p>​1.M：模型（Model）：data中的数据</p><p>​2.V：视图（view）：模板代码</p><p>​3.VM：视图模型（viewModel）：vue实例</p><p>观察发现：</p><p>​1.data中所有的属性，最后都出现在vm身上</p><p>​2.vm身上所有的属性及vuew原型上所有属性，在vue模板中都可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            address: &#x27;北京&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(vm)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解MVVM&quot;&gt;&lt;a href=&quot;#理解MVVM&quot; class=&quot;headerlink&quot; title=&quot;理解MVVM&quot;&gt;&lt;/a&gt;理解MVVM&lt;/h1&gt;&lt;p&gt;MVVM模型&lt;/p&gt;
&lt;p&gt;​	1.M：模型（Model）：data中的数据&lt;/p&gt;
&lt;p&gt;​	2.V：视图</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>03_el与data的两种写法</title>
    <link href="http://example.com/2022/07/11/03-el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://example.com/2022/07/11/03-el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</id>
    <published>2022-07-11T06:27:19.000Z</published>
    <updated>2022-07-11T06:27:20.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h1><p>data与el的两种写法</p><p>​el有两种写法：</p><p>​1.new Vue时候配置el属性</p><p>​2.先创建vue实例，随后再通过vm.$mount(‘root’)指定el的值</p><p>​data有两种写法：</p><p>​1.对象式</p><p>​2.函数式</p><p>​目前哪种写法都可以，学习到组件时，data必须用函数式</p><p>注意：由vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是vue实例了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    //el的两种写法</span><br><span class="line">    /* const v = new Vue(&#123;</span><br><span class="line">    //el:&#x27;#root&#x27;, //第一种写法</span><br><span class="line">    data:&#123;</span><br><span class="line">    name:&#x27;尚硅谷&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(v)</span><br><span class="line">    v.$mount(&#x27;#root&#x27;) //第二种写法 */</span><br><span class="line"></span><br><span class="line">    //data的两种写法</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        //data的第一种写法：对象式</span><br><span class="line">        /* data:&#123;</span><br><span class="line">        name:&#x27;尚硅谷&#x27;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line">        //data的第二种写法：函数式</span><br><span class="line">        data() &#123;</span><br><span class="line">            console.log(&#x27;@@@&#x27;, this) //此处的this是Vue实例对象</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &#x27;尚硅谷&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;el与data的两种写法&quot;&gt;&lt;a href=&quot;#el与data的两种写法&quot; class=&quot;headerlink&quot; title=&quot;el与data的两种写法&quot;&gt;&lt;/a&gt;el与data的两种写法&lt;/h1&gt;&lt;p&gt;data与el的两种写法&lt;/p&gt;
&lt;p&gt;​	el有两种写法：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>02_数据绑定</title>
    <link href="http://example.com/2022/07/11/02-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://example.com/2022/07/11/02-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2022-07-11T06:26:09.000Z</published>
    <updated>2022-07-11T06:26:39.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>Vue中有2种数据绑定的方式：</p><p>单向数据绑定（v-bind）：数据只能从data流向页面</p><p>双向数据绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data</p><p>双向绑定一般都应用在表当元素上（如：input，select等）</p><p>v-model：value可以简写为v-model，因为v-model默认收集的就是value值]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 普通写法 --&gt;</span><br><span class="line">        &lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 简写 --&gt;</span><br><span class="line">        单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br /&gt;</span><br><span class="line">        双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;111&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据绑定&quot;&gt;&lt;a href=&quot;#数据绑定&quot; class=&quot;headerlink&quot; title=&quot;数据绑定&quot;&gt;&lt;/a&gt;数据绑定&lt;/h1&gt;&lt;p&gt;Vue中有2种数据绑定的方式：&lt;/p&gt;
&lt;p&gt;单向数据绑定（v-bind）：数据只能从data流向页面&lt;/p&gt;
&lt;p&gt;双向数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS面试题</title>
    <link href="http://example.com/2022/06/29/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/06/29/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-06-29T07:54:10.000Z</published>
    <updated>2022-06-29T07:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS面试题"><a href="#CSS面试题" class="headerlink" title="CSS面试题"></a>CSS面试题</h1><h2 id="1、css快速居中对齐"><a href="#1、css快速居中对齐" class="headerlink" title="1、css快速居中对齐"></a>1、css快速居中对齐</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.con&#123;</span><br><span class="line">margin:auto;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">display:flex;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;con&quot;&gt;</span><br><span class="line">&lt;h1&gt;快速居中对齐&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2、padding与margin有什么不同"><a href="#2、padding与margin有什么不同" class="headerlink" title="2、padding与margin有什么不同"></a>2、padding与margin有什么不同</h2><p>作用对象不同，padding是作用于自身的，margin是作用于外部对象的。</p><h2 id="3、vw与百分比有什么区别"><a href="#3、vw与百分比有什么区别" class="headerlink" title="3、vw与百分比有什么区别"></a>3、vw与百分比有什么区别</h2><p>在父元素宽度100%时没有区别。百分比有继承关系，会随着父元素的变化而变化；vw只和设备的宽度有关系，不随父元素的变化而变化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.p1&#123;</span><br><span class="line">width:50%;</span><br><span class="line">height:50px;</span><br><span class="line">background:green;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">width:50vw;</span><br><span class="line">height:50px;</span><br><span class="line">background:green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="4、行内元素与块级元素"><a href="#4、行内元素与块级元素" class="headerlink" title="4、行内元素与块级元素"></a>4、行内元素与块级元素</h2><p>行内元素不可以换行，不可以设置大小，其宽高由内容决定</p><p>块级元素独占一行，其宽度有继承关系，可以修改大小</p><h2 id="5、如何让谷歌浏览器支持小字体（小于12px）"><a href="#5、如何让谷歌浏览器支持小字体（小于12px）" class="headerlink" title="5、如何让谷歌浏览器支持小字体（小于12px）"></a>5、如何让谷歌浏览器支持小字体（小于12px）</h2><p>通过scale缩放到原来的多少倍</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.small-font&#123;</span><br><span class="line">transform:scale(0.8)</span><br><span class="line">-webkit-transform:scale(0.8)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS面试题&quot;&gt;&lt;a href=&quot;#CSS面试题&quot; class=&quot;headerlink&quot; title=&quot;CSS面试题&quot;&gt;&lt;/a&gt;CSS面试题&lt;/h1&gt;&lt;h2 id=&quot;1、css快速居中对齐&quot;&gt;&lt;a href=&quot;#1、css快速居中对齐&quot; class=&quot;header</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>用python实现飞扬的小鸟游戏</title>
    <link href="http://example.com/2022/06/29/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E9%A3%9E%E6%89%AC%E7%9A%84%E5%B0%8F%E9%B8%9F%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2022/06/29/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E9%A3%9E%E6%89%AC%E7%9A%84%E5%B0%8F%E9%B8%9F%E6%B8%B8%E6%88%8F/</id>
    <published>2022-06-29T07:51:07.000Z</published>
    <updated>2022-06-29T07:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用python实现飞扬的小鸟游戏"><a href="#用python实现飞扬的小鸟游戏" class="headerlink" title="用python实现飞扬的小鸟游戏"></a>用python实现飞扬的小鸟游戏</h1><p>图片素材是采用字典的形式，导入os，用splitext把路径分割成文件名+后缀的形式。用join拼接文件路径，然后用pygame拼接装载图片和音频文件。</p><p>每轮游戏都会随机背景，小鸟颜色，和水管颜色，这个是在mian函数里设置的，用random.choice随机选择图片，水管的话因为上面还有一根，采用的是transform.flip让图片水平不动，上下翻转。用精灵组管理水管精灵，这样创建，获取，删除水管还有其他的一些操作就会方便很多。</p><p>地板动画效果是通过计算游戏地板和游戏背景宽度的差，实现地板滚动效果。水管也像地面一样不断向左移动，一旦水管移出屏幕左边，就销毁掉，重新生成水管，然后通过随机水管y坐标形成水管参差不齐的样子。声明一个小鸟类，定义小鸟切换的帧数，然后通过rect把小鸟画出来，再新建一个update方法，用于切换小鸟的帧造型，小鸟倾斜的角度，直到达到最大的倾斜角度，俯冲向下。小鸟飞翔动画是通过设置小鸟移动的帧数和移动的范围，然后定义小鸟的帧造型，通过循环使小鸟实现翅膀拍动的效果。</p><p>设置游戏输赢的方式，小鸟的高度大于地板的高度，小于0，或者小鸟和水管两个图片之间的宽高有重叠的部分，就视为碰撞，游戏结束，判断小鸟是否还在地面上，如果是的话，垂直掉落。将小鸟的结局画面定格，播放碰撞和死亡的音效，计算游戏得分。</p><p>设置一个水管类，水管和设置一个得分函数，设置数字间的间隙和位置，以水管的中心做一条辅助线，如果小鸟前一帧没过线，后一帧过线了，就加分，避免重复计分。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pygame</span><br><span class="line">import random,os</span><br><span class="line"></span><br><span class="line">W,H = 288,512 # 设置屏幕宽高</span><br><span class="line">FPS = 30 # 每秒30帧</span><br><span class="line"></span><br><span class="line">pygame.init() # 初始化</span><br><span class="line">SCREEN = pygame.display.set_mode((W,H)) # 设置窗口大小</span><br><span class="line">pygame.display.set_caption(&#x27;Flappy Bird1.0&#x27;)</span><br><span class="line">CLOCK = pygame.time.Clock() # 设置帧数</span><br><span class="line"></span><br><span class="line"># 素材</span><br><span class="line">IMAGES = &#123;&#125;</span><br><span class="line">for image in os.listdir(&#x27;assets/sprites&#x27;):</span><br><span class="line">    name,extension = os.path.splitext(image)</span><br><span class="line">    path = os.path.join(&#x27;assets/sprites&#x27;,image)</span><br><span class="line">    IMAGES[name] = pygame.image.load(path)</span><br><span class="line"></span><br><span class="line">FLOOR_Y = H - IMAGES[&#x27;floor&#x27;].get_height()</span><br><span class="line"></span><br><span class="line">AUDIO = &#123;&#125;</span><br><span class="line">for audio in os.listdir(&#x27;assets/audio&#x27;):</span><br><span class="line">    name,extension = os.path.splitext(audio)</span><br><span class="line">    path = os.path.join(&#x27;assets/audio&#x27;,audio)</span><br><span class="line">    AUDIO[name] = pygame.mixer.Sound(path)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    while True:</span><br><span class="line">        AUDIO[&#x27;start&#x27;].play()</span><br><span class="line">        IMAGES[&#x27;bgpic&#x27;] = IMAGES[random.choice([&#x27;day&#x27;,&#x27;night&#x27;])] # 背景颜色</span><br><span class="line">        color = random.choice([&#x27;red&#x27;,&#x27;yellow&#x27;,&#x27;blue&#x27;]) # 小鸟颜色</span><br><span class="line">        IMAGES[&#x27;birds&#x27;] = [IMAGES[color+&#x27;-up&#x27;],IMAGES[color+&#x27;-mid&#x27;],IMAGES[color+&#x27;-down&#x27;]]</span><br><span class="line">        pipe = IMAGES[random.choice([&#x27;green-pipe&#x27;,&#x27;red-pipe&#x27;])] # 水管</span><br><span class="line">        IMAGES[&#x27;pipes&#x27;] = [pipe,pygame.transform.flip(pipe,False,True)] # 竖直翻转</span><br><span class="line">        menu_window() # 菜单</span><br><span class="line">        result = game_window() # 游戏</span><br><span class="line">        end_window(result) # 结束</span><br><span class="line"></span><br><span class="line">def menu_window():</span><br><span class="line">    # 地板滚动</span><br><span class="line">    floor_gap = IMAGES[&#x27;floor&#x27;].get_width() - W</span><br><span class="line">    floor_x = 0</span><br><span class="line"></span><br><span class="line">    guide_x = (W - IMAGES[&#x27;guide&#x27;].get_width())/2</span><br><span class="line">    guide_y = (FLOOR_Y - IMAGES[&#x27;guide&#x27;].get_height())/2</span><br><span class="line">    # 小鸟上下移动</span><br><span class="line">    bird_x = W * 0.2</span><br><span class="line">    bird_y = (H - IMAGES[&#x27;birds&#x27;][0].get_height())/2</span><br><span class="line">    # 菜单小鸟在一定范围里移动</span><br><span class="line">    bird_y_vel = 1</span><br><span class="line">    bird_y_range = [bird_y - 8,bird_y + 8]</span><br><span class="line">    # 定义小鸟的帧造型</span><br><span class="line">    idx = 0</span><br><span class="line">    frames = [0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1]</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            # 关闭游戏</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                quit()</span><br><span class="line">            # 判断键盘空格键是否按下</span><br><span class="line">            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:</span><br><span class="line">                return</span><br><span class="line">        # 地板移动4像素，当超过floor_gap时会到原位置</span><br><span class="line">        floor_x -= 4</span><br><span class="line">        if floor_x &lt;= - floor_gap:</span><br><span class="line">            floor_x = 0</span><br><span class="line"></span><br><span class="line">        # 小鸟翅膀拍动</span><br><span class="line">        bird_y += bird_y_vel</span><br><span class="line">        if bird_y &lt; bird_y_range[0] or bird_y &gt; bird_y_range[1]:</span><br><span class="line">            bird_y_vel *= -1</span><br><span class="line"></span><br><span class="line">        idx += 1</span><br><span class="line">        idx %= len(frames)</span><br><span class="line"></span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;bgpic&#x27;], (0, 0))</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;floor&#x27;], (floor_x, FLOOR_Y))</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;guide&#x27;], (guide_x, guide_y))</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;birds&#x27;][frames[idx]], (bird_x, bird_y))</span><br><span class="line">        pygame.display.update() # 渲染到屏幕</span><br><span class="line">        CLOCK.tick(FPS) # 刷新页面</span><br><span class="line"></span><br><span class="line">def game_window():</span><br><span class="line">    score = 0</span><br><span class="line"></span><br><span class="line">    AUDIO[&#x27;flap&#x27;].play()</span><br><span class="line">    floor_gap = IMAGES[&#x27;floor&#x27;].get_width() - W</span><br><span class="line">    floor_x = 0</span><br><span class="line">    # 把小鸟画出来</span><br><span class="line">    bird = Bird(W * 0.2,H * 0.4)</span><br><span class="line">    # 创建水管</span><br><span class="line">    n_pairs = 4</span><br><span class="line">    distance = 200 # 水管间的间距</span><br><span class="line">    pipe_gap = 120 # 水管开口大小</span><br><span class="line">    pipe_group = pygame.sprite.Group()</span><br><span class="line">    for i in range(n_pairs):</span><br><span class="line">        pipe_y = random.randint(int(H*0.3),int(H*0.7))</span><br><span class="line">        pipe_up = Pipe(W+i*distance,pipe_y,True)</span><br><span class="line">        pipe_down = Pipe(W + i * distance, pipe_y - pipe_gap, False)</span><br><span class="line">        pipe_group.add(pipe_up)</span><br><span class="line">        pipe_group.add(pipe_down)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        flap = False</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            # 关闭游戏</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                quit()</span><br><span class="line">            # 判断键盘空格键是否按下</span><br><span class="line">            if event.type == pygame.KEYDOWN:</span><br><span class="line">                if event.key == pygame.K_SPACE:</span><br><span class="line">                    flap = True</span><br><span class="line">                    AUDIO[&#x27;flap&#x27;].play()</span><br><span class="line">        # 地板移动4像素，当超过floor_gap时会到原位置</span><br><span class="line">        floor_x -= 4</span><br><span class="line">        if floor_x &lt;= - floor_gap:</span><br><span class="line">            floor_x = 0</span><br><span class="line">        bird.update(flap)</span><br><span class="line"></span><br><span class="line">        first_pipe_up = pipe_group.sprites()[0]</span><br><span class="line">        first_pipe_down = pipe_group.sprites()[1]</span><br><span class="line">        if first_pipe_up.rect.right &lt; 0:</span><br><span class="line">            pipe_y = random.randint(int(H * 0.3),int(H * 0.7))</span><br><span class="line">            new_pipe_up = Pipe(first_pipe_up.rect.x + n_pairs * distance,pipe_y,True)</span><br><span class="line">            new_pipe_down = Pipe(first_pipe_up.rect.x + n_pairs * distance, pipe_y - pipe_gap, False)</span><br><span class="line">            pipe_group.add(new_pipe_up)</span><br><span class="line">            pipe_group.add(new_pipe_down)</span><br><span class="line">            first_pipe_up.kill()</span><br><span class="line">            first_pipe_down.kill()</span><br><span class="line">        pipe_group.update()</span><br><span class="line">        # 判断是否碰撞</span><br><span class="line">        if bird.rect.y &gt; FLOOR_Y or bird.rect.y &lt; 0 or pygame.sprite.spritecollideany(bird,pipe_group):</span><br><span class="line">            bird.dying = True</span><br><span class="line">            AUDIO[&#x27;hit&#x27;].play()</span><br><span class="line">            AUDIO[&#x27;die&#x27;].play()</span><br><span class="line">            result = &#123;&#x27;bird&#x27;:bird,&#x27;pipe_group&#x27;:pipe_group,&#x27;score&#x27;:score&#125;</span><br><span class="line">            return result</span><br><span class="line">        # 判断是否得分</span><br><span class="line">        if bird.rect.left + first_pipe_up.x_vel &lt; first_pipe_up.rect.centerx &lt; bird.rect.left:</span><br><span class="line">            AUDIO[&#x27;score&#x27;].play()</span><br><span class="line">            score += 1</span><br><span class="line"></span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;bgpic&#x27;], (0, 0))</span><br><span class="line">        pipe_group.draw(SCREEN)</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;floor&#x27;], (floor_x, FLOOR_Y))</span><br><span class="line">        # 显示得分</span><br><span class="line">        show_score(score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SCREEN.blit(bird.image,bird.rect)</span><br><span class="line">        pygame.display.update()  # 渲染到屏幕</span><br><span class="line">        CLOCK.tick(FPS)  # 刷新页面</span><br><span class="line"></span><br><span class="line">def end_window(result):</span><br><span class="line">    gameover_x = (W - IMAGES[&#x27;gameover&#x27;].get_width())/2</span><br><span class="line">    gameover_y = (FLOOR_Y - IMAGES[&#x27;gameover&#x27;].get_height())/2</span><br><span class="line"></span><br><span class="line">    bird = result[&#x27;bird&#x27;]</span><br><span class="line">    pipe_group = result[&#x27;pipe_group&#x27;]</span><br><span class="line">    while True:</span><br><span class="line">        if bird.dying:</span><br><span class="line">            bird.go_die()</span><br><span class="line">        else:</span><br><span class="line">            for event in pygame.event.get():</span><br><span class="line">                # 关闭游戏</span><br><span class="line">                if event.type == pygame.QUIT:</span><br><span class="line">                    quit()</span><br><span class="line">                # 判断键盘空格键是否按下</span><br><span class="line">                if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:</span><br><span class="line">                    return</span><br><span class="line"></span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;bgpic&#x27;], (0, 0))</span><br><span class="line">        pipe_group.draw(SCREEN)</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;floor&#x27;], (0, FLOOR_Y))</span><br><span class="line">        SCREEN.blit(IMAGES[&#x27;gameover&#x27;], (gameover_x, gameover_y))</span><br><span class="line">        show_score(result[&#x27;score&#x27;])</span><br><span class="line">        SCREEN.blit(bird.image,bird.rect)</span><br><span class="line">        pygame.display.update()  # 渲染到屏幕</span><br><span class="line">        CLOCK.tick(FPS)  # 刷新页面</span><br><span class="line"></span><br><span class="line">def show_score(score):</span><br><span class="line">    score_str = str(score)</span><br><span class="line">    n = len(score_str)</span><br><span class="line">    w = IMAGES[&#x27;0&#x27;].get_width() * 1.1</span><br><span class="line">    x = (W - n * w) / 2</span><br><span class="line">    y = H * 0.1</span><br><span class="line">    for number in score_str:</span><br><span class="line">        SCREEN.blit(IMAGES[number], (x, y))</span><br><span class="line">        x += w</span><br><span class="line"></span><br><span class="line"># 鸟类</span><br><span class="line">class Bird:</span><br><span class="line">    def __init__(self,x,y):</span><br><span class="line">        # 定义小鸟切换的帧数</span><br><span class="line">        self.frames = [0] * 5 + [1] * 5 + [2] * 5 + [1] * 5</span><br><span class="line">        self.idx = 0</span><br><span class="line">        self.images = IMAGES[&#x27;birds&#x27;]</span><br><span class="line">        self.image = self.images[self.frames[self.idx]]</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.rect.x = x</span><br><span class="line">        self.rect.y = y</span><br><span class="line">        # 拍动翅膀</span><br><span class="line">        self.y_vel = -10</span><br><span class="line">        self.max_y_vel = 10</span><br><span class="line">        self.gravity = 1</span><br><span class="line">        # 旋转</span><br><span class="line">        self.rotate = 45</span><br><span class="line">        self.max_rotate = -20</span><br><span class="line">        self.rotate_vel = -3</span><br><span class="line">        # 小鸟移动</span><br><span class="line">        self.y_vel_after_flap = -10</span><br><span class="line">        self.rotate_after_flap = 45</span><br><span class="line">        self.dying = False</span><br><span class="line">    # 更新小鸟帧造型</span><br><span class="line">    def update(self,flap=False):</span><br><span class="line">        if flap:</span><br><span class="line">            self.y_vel = self.y_vel_after_flap</span><br><span class="line">            self.rotate = self.rotate_after_flap</span><br><span class="line"></span><br><span class="line">        self.y_vel = min(self.y_vel + self.gravity,self.max_y_vel)</span><br><span class="line">        self.rect.y += self.y_vel</span><br><span class="line">        self.rotate = max(self.rotate+self.rotate_vel,self.max_rotate)</span><br><span class="line"></span><br><span class="line">        self.idx += 1</span><br><span class="line">        self.idx %= len(self.frames)</span><br><span class="line">        self.image = self.images[self.frames[self.idx]]</span><br><span class="line">        self.image = pygame.transform.rotate(self.image,self.rotate)</span><br><span class="line"></span><br><span class="line">    # 垂直90°掉落</span><br><span class="line">    def go_die(self):</span><br><span class="line">        if self.rect.y &lt; FLOOR_Y:</span><br><span class="line">            self.rect.y += self.max_y_vel</span><br><span class="line">            self.rotate = -90</span><br><span class="line">            self.image = self.images[self.frames[self.idx]]</span><br><span class="line">            self.image = pygame.transform.rotate(self.image,self.rotate)</span><br><span class="line">        else:</span><br><span class="line">            self.dying = False</span><br><span class="line"></span><br><span class="line"># 水管类</span><br><span class="line">class Pipe(pygame.sprite.Sprite):</span><br><span class="line">    # 精灵组,管理水管</span><br><span class="line">    def __init__(self,x,y,upwards=True):</span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line">        if upwards:</span><br><span class="line">            self.image = IMAGES[&#x27;pipes&#x27;][0]</span><br><span class="line">            self.rect = self.image.get_rect()</span><br><span class="line">            self.rect.x = x</span><br><span class="line">            self.rect.top = y</span><br><span class="line">        else:</span><br><span class="line">            self.image = IMAGES[&#x27;pipes&#x27;][1]</span><br><span class="line">            self.rect = self.image.get_rect()</span><br><span class="line">            self.rect.x = x</span><br><span class="line">            self.rect.bottom = y</span><br><span class="line">        self.x_vel = -4</span><br><span class="line"></span><br><span class="line">    def update(self):</span><br><span class="line">        self.rect.x += self.x_vel</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用python实现飞扬的小鸟游戏&quot;&gt;&lt;a href=&quot;#用python实现飞扬的小鸟游戏&quot; class=&quot;headerlink&quot; title=&quot;用python实现飞扬的小鸟游戏&quot;&gt;&lt;/a&gt;用python实现飞扬的小鸟游戏&lt;/h1&gt;&lt;p&gt;图片素材是采用字典的形式，导</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue应用层</title>
    <link href="http://example.com/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://example.com/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2022-06-28T06:52:35.000Z</published>
    <updated>2022-06-28T06:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue应用层"><a href="#Vue应用层" class="headerlink" title="Vue应用层"></a>Vue应用层</h1><h2 id="1、MVC与MVVM"><a href="#1、MVC与MVVM" class="headerlink" title="1、MVC与MVVM"></a>1、MVC与MVVM</h2><p>MVC缺点：前后端无法独立开发，前端没有自己的数据中心，太过依赖于后台</p><p>MVVM（前后端分离）：前端有自己的视图控制器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、v-model的原理"><a href="#2、v-model的原理" class="headerlink" title="2、v-model的原理"></a>2、v-model的原理</h2><p>v-model表现形式是数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入电话&quot; v-model=&quot;tel&quot;/&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;tel&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;,</span><br><span class="line">tel:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、data-为什么是函数"><a href="#3、data-为什么是函数" class="headerlink" title="3、data()为什么是函数"></a>3、data()为什么是函数</h2><p>闭包，让每一个组件都有自己的私有作用域，确保各组件数据不会相互干扰，如果不用闭包的方法，采用纯对象的方法就会有干扰 &#x3D;&gt; let obj &#x3D; { }</p><h2 id="4、v-if与v-show"><a href="#4、v-if与v-show" class="headerlink" title="4、v-if与v-show"></a>4、v-if与v-show</h2><ul><li>v-if：不满足条件的话不会渲染dom，使用场景：单次判断，只需要判断一次</li><li>v-show的type只有true或false，它把display设置为none，它是隐藏dom，使用场景：多次切换，就不需要多次渲染，不会浪费性能，v-show不能用于权限操作</li></ul><h2 id="5、虚拟dom"><a href="#5、虚拟dom" class="headerlink" title="5、虚拟dom"></a>5、虚拟dom</h2><p>render负责把template里面的东西转化成真实dom<br>1.初始化的时候，将真实dom转化成虚拟dom<br>2.更新的时候做对比</p><ul><li>虚拟dom是在vue2.0中加入的</li><li>虚拟dom的本质就是一个js对象，它具备跨平台的特质</li></ul><p>vue的渲染过程：</p><ul><li><p>将真实dom转化成真实dom，也就是js对象</p></li><li><p>更新的时候用来做对比</p></li></ul><p><img src="/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/vue1.png"></p><p>虚拟dom是如何提升vue的渲染效率？</p><ul><li>组件化</li><li>数据驱动</li></ul><p>虚拟dom可以局部更新节点数据，从直接操作dom的地方拿到两个js对象中去做比较，通过两个对象的对比，找出差异项进行更新，损耗小，优化性能。</p><h2 id="6、diff-中的patch"><a href="#6、diff-中的patch" class="headerlink" title="6、diff()中的patch()"></a>6、diff()中的patch()</h2><p>vue的渲染有两条线：</p><p>1.初始化：patch(container,vnode)，将虚拟dom转化为真实dom</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function createElement(vnode)&#123;</span><br><span class="line">//虚拟dom生成的三要素：目标元素，属性，子节点，目标元素是不可或缺的</span><br><span class="line">let tag = vnode.tag//目标元素ul</span><br><span class="line">let attrs = vnode.attrs || &#123;&#125;//属性</span><br><span class="line">let children = vnode.children || []//子节点</span><br><span class="line"></span><br><span class="line">if(!tag) &#123;</span><br><span class="line">retun null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建对应的dom</span><br><span class="line">let elem = document.createElement(tag)</span><br><span class="line">let attrName</span><br><span class="line">//给dom添加属性</span><br><span class="line">for(attrName in attrs)&#123;</span><br><span class="line">if(attrs.hasOwnProperty(attrName))&#123;</span><br><span class="line">elem.setAttribute(attrName,attrs[attrName])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将子元素添加到目标之上</span><br><span class="line">children.forEach(function(childVnode)&#123;</span><br><span class="line">elem.appendChild(createElement(childVnode))</span><br><span class="line">&#125;);</span><br><span class="line">return elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.更新：update(vnode,newVnode)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateChildren(vnode,newVnode) &#123;</span><br><span class="line">let children = vnode.cildren || []//现有节点</span><br><span class="line">let newChildren = newVnode.children || []//新节点</span><br><span class="line">children.forEach(function(childrenVnode,index)&#123;</span><br><span class="line">//循环每一项，通过index将新老节点进行对换</span><br><span class="line">let newChildrenVnode = newChildren[index]</span><br><span class="line">//如果第一层tag没有变化</span><br><span class="line">if(childrenVnode.tag === newChildrenVnode.tag)&#123;</span><br><span class="line">//继续进行深层次的对比，通过递归去比较</span><br><span class="line">updateChildren(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//将childrenVnode替换成newChildrenVnode</span><br><span class="line">replaceNode(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue应用层&quot;&gt;&lt;a href=&quot;#Vue应用层&quot; class=&quot;headerlink&quot; title=&quot;Vue应用层&quot;&gt;&lt;/a&gt;Vue应用层&lt;/h1&gt;&lt;h2 id=&quot;1、MVC与MVVM&quot;&gt;&lt;a href=&quot;#1、MVC与MVVM&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6相关面试题</title>
    <link href="http://example.com/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-06-28T04:34:26.000Z</published>
    <updated>2022-06-28T04:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6相关面试题"><a href="#ES6相关面试题" class="headerlink" title="ES6相关面试题"></a>ES6相关面试题</h1><h2 id="1、varconstlet"><a href="#1、varconstlet" class="headerlink" title="1、varconstlet"></a>1、varconstlet</h2><h3 id="var存在的问题"><a href="#var存在的问题" class="headerlink" title="var存在的问题"></a>var存在的问题</h3><ul><li>声明提升</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//var是先使用后定义</span><br><span class="line">console.log(num)//undefined</span><br><span class="line">var num = 123</span><br></pre></td></tr></table></figure><ul><li>变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num1 = 12</span><br><span class="line">var num1 = 34</span><br><span class="line">console.log(num1)//34</span><br></pre></td></tr></table></figure><ul><li>没有局部作用域</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn2() &#123;</span><br><span class="line">for(var i = 0;i &lt; 3;i++)&#123;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const定义的变量不能被修改，否则会报错</li><li>声明之后必须赋值，否则会报错</li><li>支持块级作用域，不存在声明提升和变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const DEMO = 123</span><br><span class="line">DEMO = 456</span><br><span class="line">console.log(DEMO)//报错</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let支持块级作用域，不存在声明提升和变量覆盖</li><li>定义的变量可以被修改</li><li>声明之后可以不赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//运用解构的方式互换两个值</span><br><span class="line">let a = 1;</span><br><span class="line">let b = 2;</span><br><span class="line">[a,b] = [b,a]</span><br><span class="line">console.log(a,b)//2,1</span><br></pre></td></tr></table></figure><h2 id="2、数组去重"><a href="#2、数组去重" class="headerlink" title="2、数组去重"></a>2、数组去重</h2><ul><li>indexOf循环去重</li><li>ES6 set去重：Array.from(new set(array))</li><li>Object键值对去重：把数组的值存在Object的key值，比如Object[value1] &#x3D; true，在判断另一个值的时候，如果Object[value2]存在的话，就说明该值是重复的。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [12,43,23,12,43,55]</span><br><span class="line">let item = [...new Set(arr)]</span><br><span class="line">console.log(item)</span><br></pre></td></tr></table></figure><h2 id="3、promise的原理"><a href="#3、promise的原理" class="headerlink" title="3、promise的原理"></a>3、promise的原理</h2><ul><li>promise 对象的，目的是为异步编程提供统一接口。每一个异步任务返回一个 promise 对象，该对象有一个 then 方法，允许指定回调函数。</li><li>一个promise 可能有三种状态:等待、已完成、已拒绝。</li><li>promise 必须实现 then 方法，而且then 必须返回一个promise，同一个 promise 的 then 可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致。</li><li>then 方法接受两个参数，第一个参数是成功时的回调，在 promise 由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在 promise 由“等待”态转换到“拒绝”态时调用。同时，then 可以接受另一个promise 传入，也接受一个“类then”的对象或方法，即 thenable 对象。</li><li>promise的构造函数是同步执行的，.then()方法是异步执行的</li><li>如果没有promise的话，可以用回调函数代替</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">console.log(1)</span><br><span class="line">resolve();</span><br><span class="line">console.log(2)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">console.log(3)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br><span class="line">//1,2,4,3</span><br></pre></td></tr></table></figure><h2 id="4、深拷贝与浅拷贝"><a href="#4、深拷贝与浅拷贝" class="headerlink" title="4、深拷贝与浅拷贝"></a>4、深拷贝与浅拷贝</h2><p>深拷贝(互不相干)：只能解决80%的拷贝，因为方法不能拷贝</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//深拷贝用法</span><br><span class="line">let list = [</span><br><span class="line">&#123;id:1,stuName:&#x27;小明&#x27;,class:&#x27;9班&#x27;&#125;,</span><br><span class="line">&#123;id:2,stuName:&#x27;小红&#x27;,class:&#x27;10班&#x27;&#125;,</span><br><span class="line">&#123;id:3,stuName:&#x27;小绿&#x27;,class:&#x27;11班&#x27;&#125;,</span><br><span class="line">];</span><br><span class="line">// 先将数组转化为字符串，然后再转化回来</span><br><span class="line">let newList = JSON.parse(JSON.stringify(list));</span><br><span class="line">newList.push(&#123;id:888&#125;);</span><br><span class="line">console.log(list,newList)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//标准的深拷贝 =&gt; 专门针对引用数据类型(数组or对象)</span><br><span class="line">//数组的构造器指向Array(基类)，对象的构造器指向Object</span><br><span class="line">function deepClone(source)&#123;</span><br><span class="line">//判断是不是数组，是的话先存储起来</span><br><span class="line">const targetObj = source.constructor === Array ? [] : &#123;&#125;;</span><br><span class="line">for (let keys in source)&#123;</span><br><span class="line">if(source.hasOwnProperty(keys))&#123;</span><br><span class="line">//keys可能有三种情况：基础数据类型，对象，数组</span><br><span class="line">//引用数据类型</span><br><span class="line">if(source[keys] &amp;&amp; typeof source[keys] === &#x27;object&#x27;)&#123;</span><br><span class="line">//再次判断是否是数组</span><br><span class="line">targeObj[keys] = source[keys].constructor === Array ? [] : &#123;&#125;;</span><br><span class="line">//递归</span><br><span class="line">targeObj[keys] = deepClone(source[keys])</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//基本数据类型，直接赋值</span><br><span class="line">targetObj[keys] = source[keys];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let objC = &#123;</span><br><span class="line">ff:&#x27;name&#x27;,</span><br><span class="line">gg:1,</span><br><span class="line">obj:&#123;str:&#x27;111&#x27;,age:12&#125;,</span><br><span class="line">arr:[1,2,3,4]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let newObjC = deepClone(objC);</span><br><span class="line">newObjC.ff = &#x27;hhh&#x27;;</span><br><span class="line">newObjC.arr.push(&quot;www&quot;);</span><br><span class="line">console.log(objC,newObjC)</span><br></pre></td></tr></table></figure><p>浅拷贝(藕断丝连 )：数组和对象的赋值都叫做浅拷贝，针对一维数组和对象可以看作是深拷贝，但针对多维数组和对象就是浅拷贝</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3];</span><br><span class="line">let newArr = arr;</span><br><span class="line">newArr.push(4);</span><br><span class="line">console.log(arr,newArr)//[1,2,3,4] [1,2,3,4]</span><br><span class="line"></span><br><span class="line">//解构赋值</span><br><span class="line">let arr = [[1,2,3],[4,5,6]];</span><br><span class="line">let newArr = [...arr];</span><br><span class="line">newArr.push(4);</span><br><span class="line">console.log(arr,newArr)//[[1,2,3,888],[4,5,6]] [[1,2,3,888],[4,5,6]]</span><br><span class="line"></span><br><span class="line">let arr2 = [[1,2,3],[4,5,6]];</span><br><span class="line">let newArr2 = [...arr2];</span><br><span class="line">newArr2[0].push(888);</span><br><span class="line">console.log(arr2,newArr2) // [[1,2,3,888],[4,5,6]] [[1,2,3,888],[4,5,6]]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6相关面试题&quot;&gt;&lt;a href=&quot;#ES6相关面试题&quot; class=&quot;headerlink&quot; title=&quot;ES6相关面试题&quot;&gt;&lt;/a&gt;ES6相关面试题&lt;/h1&gt;&lt;h2 id=&quot;1、varconstlet&quot;&gt;&lt;a href=&quot;#1、varconstlet&quot; c</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="ES6面试题" scheme="http://example.com/tags/ES6%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
