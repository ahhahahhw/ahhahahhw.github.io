<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ahhahahhw</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-27T03:33:17.851Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ahhahahhw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>21_vue生命周期</title>
    <link href="http://example.com/2022/07/27/21-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/07/27/21-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-07-27T03:33:15.000Z</published>
    <updated>2022-07-27T03:33:17.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="一、引出生命周期"><a href="#一、引出生命周期" class="headerlink" title="一、引出生命周期"></a>一、引出生命周期</h2><p>生命周期：</p><p>​1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</p><p>​2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p><p>​3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p><p>​4.生命周期函数中的this指向是vm 或 组件实例对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 v-if=&quot;a&quot;&gt;你好啊&lt;/h2&gt;</span><br><span class="line">&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#x27;#root&#x27;,</span><br><span class="line">data: &#123;</span><br><span class="line">a: false,</span><br><span class="line">opacity: 1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&#x27;mounted&#x27;, this)</span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">this.opacity -= 0.01</span><br><span class="line">if (this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">&#125;, 16)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过外部的定时器实现（不推荐）</span><br><span class="line">/* setInterval(() =&gt; &#123;</span><br><span class="line">vm.opacity -= 0.01</span><br><span class="line">if(vm.opacity &lt;= 0) vm.opacity = 1</span><br><span class="line">&#125;,16) */</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、生命周期钩子"><a href="#二、生命周期钩子" class="headerlink" title="二、生命周期钩子"></a>二、生命周期钩子</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot; :x=&quot;n&quot;&gt;</span><br><span class="line">        &lt;h2 v-text=&quot;n&quot;&gt;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;bye&quot;&gt;点我销毁vm&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        // template:`</span><br><span class="line">        // &lt;div&gt;</span><br><span class="line">        // &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        // &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        // &lt;/div&gt;</span><br><span class="line">        // `,</span><br><span class="line">        data: &#123;</span><br><span class="line">            n: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line">                console.log(&#x27;add&#x27;)</span><br><span class="line">                this.n++</span><br><span class="line">            &#125;,</span><br><span class="line">            bye() &#123;</span><br><span class="line">                console.log(&#x27;bye&#x27;)</span><br><span class="line">                this.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            n() &#123;</span><br><span class="line">                console.log(&#x27;n变了&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.log(&#x27;created&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#x27;mounted&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.log(&#x27;updated&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">            console.log(&#x27;beforeDestroy&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            console.log(&#x27;destroyed&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>常用的生命周期钩子：</p><p>​1、mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p><p>​2、beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p><p>关于销毁Vue实例</p><p>1、销毁后借助Vue开发者工具看不到任何信息。</p><p>2、销毁后自定义事件会失效，但原生DOM事件依然有效。</p><p>3、一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;opacity = 1&quot;&gt;透明度设置为1&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;stop&quot;&gt;点我停止变换&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            opacity: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            stop() &#123;</span><br><span class="line">                this.$destroy()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.log(&#x27;mounted&#x27;, this)</span><br><span class="line">            this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">                console.log(&#x27;setInterval&#x27;)</span><br><span class="line">                this.opacity -= 0.01</span><br><span class="line">                if (this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">            &#125;, 16)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">            console.log(&#x27;vm即将驾鹤西游了&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h1&gt;&lt;h2 id=&quot;一、引出生命周期&quot;&gt;&lt;a href=&quot;#一、引出生命周期&quot; class=&quot;headerlink&quot; title=&quot;一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>20_自定义指令</title>
    <link href="http://example.com/2022/07/27/20-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2022/07/27/20-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</id>
    <published>2022-07-27T03:32:51.000Z</published>
    <updated>2022-07-27T03:32:52.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><p>自定义指令总结：</p><p>一、定义语法：</p><p>​(1).局部指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;指令名:配置对象&#125;</span><br><span class="line">&#125;)</span><br><span class="line">或</span><br><span class="line">new Vue(&#123;</span><br><span class="line">directives&#123;指令名:回调函数&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​(2).全局指令：</p><p>Vue.directive(指令名,配置对象) 或  Vue.directive(指令名,回调函数)</p><p>二、配置对象中常用的3个回调：</p><p>​(1).bind：指令与元素成功绑定时调用。</p><p>​(2).inserted：指令所在元素被插入页面时调用。</p><p>​(3).update：指令所在模板结构被重新解析时调用。</p><p>三、备注：</p><p>​1.指令定义时不加v-，但使用时要加v-；</p><p>​2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;</span><br><span class="line">        &lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span><br><span class="line">        &lt;h2&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">    //定义全局指令</span><br><span class="line">    /* Vue.directive(&#x27;fbind&#x27;,&#123;</span><br><span class="line">    //指令与元素成功绑定时（一上来）</span><br><span class="line">    bind(element,binding)&#123;</span><br><span class="line">    element.value = binding.value</span><br><span class="line">    &#125;,</span><br><span class="line">    //指令所在元素被插入页面时</span><br><span class="line">    inserted(element,binding)&#123;</span><br><span class="line">    element.focus()</span><br><span class="line">    &#125;,</span><br><span class="line">    //指令所在的模板被重新解析时</span><br><span class="line">    update(element,binding)&#123;</span><br><span class="line">    element.value = binding.value</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;) */</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            n: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        directives: &#123;</span><br><span class="line">            //big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span><br><span class="line">            /* &#x27;big-number&#x27;(element,binding)&#123;</span><br><span class="line">            // console.log(&#x27;big&#x27;)</span><br><span class="line">            element.innerText = binding.value * 10</span><br><span class="line">            &#125;, */</span><br><span class="line">            big(element, binding) &#123;</span><br><span class="line">                console.log(&#x27;big&#x27;, this) //注意此处的this是window</span><br><span class="line">                // console.log(&#x27;big&#x27;)</span><br><span class="line">                element.innerText = binding.value * 10</span><br><span class="line">            &#125;,</span><br><span class="line">            fbind: &#123;</span><br><span class="line">                //指令与元素成功绑定时（一上来）</span><br><span class="line">                bind(element, binding) &#123;</span><br><span class="line">                    element.value = binding.value</span><br><span class="line">                &#125;,</span><br><span class="line">                //指令所在元素被插入页面时</span><br><span class="line">                inserted(element, binding) &#123;</span><br><span class="line">                    element.focus()</span><br><span class="line">                &#125;,</span><br><span class="line">                //指令所在的模板被重新解析时</span><br><span class="line">                update(element, binding) &#123;</span><br><span class="line">                    element.value = binding.value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义指令&quot;&gt;&lt;a href=&quot;#自定义指令&quot; class=&quot;headerlink&quot; title=&quot;自定义指令&quot;&gt;&lt;/a&gt;自定义指令&lt;/h1&gt;&lt;p&gt;需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。&lt;/p&gt;
&lt;p&gt;需求2：定义一个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>19_内置指令</title>
    <link href="http://example.com/2022/07/27/19-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2022/07/27/19-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</id>
    <published>2022-07-27T03:31:54.000Z</published>
    <updated>2022-07-27T03:32:00.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h1><p>学过的指令：</p><ul><li>v-bind  : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for  : 遍历数组&#x2F;对象&#x2F;字符串</li><li>v-on   : 绑定事件监听, 可简写为@</li><li>v-if     : 条件渲染（动态控制节点是否存存在）</li><li>v-else  : 条件渲染（动态控制节点是否存存在）</li><li>v-show  : 条件渲染 (动态控制节点是否展示)</li></ul><p>v-text指令：</p><p>​1.作用：向其所在的节点中渲染文本内容。</p><p>​2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p><p>v-html指令：</p><p>​1.作用：向指定节点中渲染包含html结构的内容。</p><p>​2.与插值语法的区别：</p><p>​(1).v-html会替换掉节点中所有的内容，则不会。</p><p>​(2).v-html可以识别html结构。</p><p>​3.严重注意：v-html有安全性问题！！！！</p><p>​(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</p><p>​(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p><p>v-cloak指令（没有值）：</p><p>​1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p><p>​2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p><p>v-once指令：</p><p>​1.v-once所在节点在初次动态渲染后，就视为静态内容了。</p><p>​2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p><p>v-pre指令：</p><p>​1.跳过其所在节点的编译过程。</p><p>​2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- v-text --&gt;</span><br><span class="line">        &lt;div&gt;你好，&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div v-text=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-html --&gt;</span><br><span class="line">        &lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-cloak --&gt;</span><br><span class="line">        &lt;h2 v=-cloak&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-once --&gt;</span><br><span class="line">        &lt;h2 v-once&gt;初始值为：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;当前值为：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-pre --&gt;</span><br><span class="line">        &lt;h2 v-pre&gt;Vue其实很简单&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            str: &#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;,</span><br><span class="line">            str2: &#x27;&lt;a href=javascript:lo&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;,</span><br><span class="line">            n: 1,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内置指令&quot;&gt;&lt;a href=&quot;#内置指令&quot; class=&quot;headerlink&quot; title=&quot;内置指令&quot;&gt;&lt;/a&gt;内置指令&lt;/h1&gt;&lt;p&gt;学过的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v-bind  : 单向绑定解析表达式, 可简写为 :xxx&lt;/li&gt;
&lt;li&gt;v-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>17_收集表单数据</title>
    <link href="http://example.com/2022/07/18/17-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/07/18/17-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</id>
    <published>2022-07-18T04:14:00.000Z</published>
    <updated>2022-07-18T04:15:57.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h1><p>收集表单数据：</p><p>​1.若：<input type="text">，则v-model收集的是value值，用户输入的就是value值。</p><p>​2.若：<input type="radio">，则v-model收集的是value值，且要给标签配置value值。</p><p>​3.若：<input type="checkbox"></p><p>​（1）没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​（2）配置input的value属性:</p><p>​v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​v-model的初始值是数组，那么收集的的就是value组成的数组</p><p>​4.v-model的三个修饰符：</p><p>​lazy：失去焦点再收集数据</p><p>​number：输入字符串转为有效的数字</p><p>​trim：输入首尾空格过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;form @submit.prevent=&quot;demo&quot;&gt;</span><br><span class="line">账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">性别：</span><br><span class="line">男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;</span><br><span class="line">女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">爱好：</span><br><span class="line">学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;</span><br><span class="line">打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;</span><br><span class="line">吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">所属校区</span><br><span class="line">&lt;select v-model=&quot;userInfo.city&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">其他信息：</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">userInfo:&#123;</span><br><span class="line">account:&#x27;&#x27;,</span><br><span class="line">password:&#x27;&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">sex:&#x27;female&#x27;,</span><br><span class="line">hobby:[],</span><br><span class="line">city:&#x27;beijing&#x27;,</span><br><span class="line">other:&#x27;&#x27;,</span><br><span class="line">agree:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">demo()&#123;</span><br><span class="line">console.log(JSON.stringify(this.userInfo))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;收集表单数据&quot;&gt;&lt;a href=&quot;#收集表单数据&quot; class=&quot;headerlink&quot; title=&quot;收集表单数据&quot;&gt;&lt;/a&gt;收集表单数据&lt;/h1&gt;&lt;p&gt;收集表单数据：&lt;/p&gt;
&lt;p&gt;​	1.若：&lt;input type=&quot;text&quot;&gt;，则v-model收集的是v</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>16_Vue数据监测</title>
    <link href="http://example.com/2022/07/18/16-Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/"/>
    <id>http://example.com/2022/07/18/16-Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</id>
    <published>2022-07-18T04:13:41.000Z</published>
    <updated>2022-07-18T04:13:42.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue数据监测"><a href="#Vue数据监测" class="headerlink" title="Vue数据监测"></a>Vue数据监测</h1><p>Vue监视数据的原理：</p><p>  1.vue会监视data中所有层次的数据。</p><p>  2.如何监测对象中的数据？</p><p>​通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​（1）对象中后追加的属性，Vue默认不做响应式处理</p><p>​（2）如需给后添加的属性做响应式，请使用如下API：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.set(target，propertyName/index，value) 或 </span><br><span class="line"></span><br><span class="line">vm.$set(target，propertyName/index，value)</span><br></pre></td></tr></table></figure><p>  3.如何监测数组中的数据？</p><p>​通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​（1）调用原生对应的方法对数组进行更新。</p><p>​（2）重新解析模板，进而更新页面。</p><p>  4.在Vue修改数组中的某个元素一定要用如下方法：</p><p>​（1）使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​（2）Vue.set() 或 vm.$set()</p><p>​        特别注意：Vue.set()和vm.$set()不能给vm或vm的根数据对象添加属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;student.sex = &#x27;未知&#x27; &quot;&gt;修改性别&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">        &lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;爱好：&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;h&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;h3&gt;朋友们：&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            student: &#123;</span><br><span class="line">                name: &#x27;tom&#x27;,</span><br><span class="line">                age: 18,</span><br><span class="line">                hobby: [&#x27;抽烟&#x27;, &#x27;喝酒&#x27;, &#x27;烫头&#x27;],</span><br><span class="line">                friends: [&#123;</span><br><span class="line">                        name: &#x27;jerry&#x27;,</span><br><span class="line">                        age: 35</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &#x27;tony&#x27;,</span><br><span class="line">                        age: 36</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            addSex() &#123;</span><br><span class="line">                // Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">                this.$set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            addFriend() &#123;</span><br><span class="line">                this.student.friends.unshift(&#123;</span><br><span class="line">                    name: &#x27;jack&#x27;,</span><br><span class="line">                    age: 70</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            updateFirstFriendName() &#123;</span><br><span class="line">                this.student.friends[0].name = &#x27;张三&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            addHobby() &#123;</span><br><span class="line">                this.student.hobby.push(&#x27;学习&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            updateHobby() &#123;</span><br><span class="line">                // this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span><br><span class="line">                // Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="line">                this.$set(this.student.hobby, 0, &#x27;开车&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            removeSmoke() &#123;</span><br><span class="line">                this.student.hobby = this.student.hobby.filter((h) =&gt; &#123;</span><br><span class="line">                    return h !== &#x27;抽烟&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue数据监测&quot;&gt;&lt;a href=&quot;#Vue数据监测&quot; class=&quot;headerlink&quot; title=&quot;Vue数据监测&quot;&gt;&lt;/a&gt;Vue数据监测&lt;/h1&gt;&lt;p&gt;Vue监视数据的原理：&lt;/p&gt;
&lt;p&gt;  1.vue会监视data中所有层次的数据。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>15_key作用与原理</title>
    <link href="http://example.com/2022/07/18/15-key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/07/18/15-key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-18T04:13:00.000Z</published>
    <updated>2022-07-18T04:13:01.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="key作用与原理"><a href="#key作用与原理" class="headerlink" title="key作用与原理"></a>key作用与原理</h1><p>面试题：react、vue中的key有什么作用？（key的内部原理）</p><p>​1.虚拟DOM中key的作用：</p><p>​key是虚拟DOM对象的标识，当状态中的数据发生变化时，vue会根据【新数据】生成【新的虚拟DOM】</p><p>随后vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><p>​2.对比规则：</p><p>​（1）旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​                 ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p><p>​                 ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​（2）旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到到页面。</p><p>​     3. 用index作为key可能会引发的问题：</p><p>​（1） 若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p><p>​（2） 如果结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p><p>​4.开发中如何选择key?</p><p>​（1）最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p><p>​（2）如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示， 使用index作为key是没有问题的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 遍历数组 --&gt;</span><br><span class="line">        &lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">        &lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">                &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                persons: [&#123;</span><br><span class="line">                        id: &#x27;001&#x27;,</span><br><span class="line">                        name: &#x27;张三&#x27;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;002&#x27;,</span><br><span class="line">                        name: &#x27;李四&#x27;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;003&#x27;,</span><br><span class="line">                        name: &#x27;王五&#x27;,</span><br><span class="line">                        age: 20</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                add() &#123;</span><br><span class="line">                    const p = &#123;</span><br><span class="line">                        id: &#x27;004&#x27;,</span><br><span class="line">                        name: &#x27;老刘&#x27;,</span><br><span class="line">                        age: 40</span><br><span class="line">                    &#125;</span><br><span class="line">                    this.persons.unshift(p)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;key作用与原理&quot;&gt;&lt;a href=&quot;#key作用与原理&quot; class=&quot;headerlink&quot; title=&quot;key作用与原理&quot;&gt;&lt;/a&gt;key作用与原理&lt;/h1&gt;&lt;p&gt;面试题：react、vue中的key有什么作用？（key的内部原理）&lt;/p&gt;
&lt;p&gt;​	1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>14_基本列表</title>
    <link href="http://example.com/2022/07/18/14-%E5%9F%BA%E6%9C%AC%E5%88%97%E8%A1%A8/"/>
    <id>http://example.com/2022/07/18/14-%E5%9F%BA%E6%9C%AC%E5%88%97%E8%A1%A8/</id>
    <published>2022-07-18T04:12:18.000Z</published>
    <updated>2022-07-18T04:12:19.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h1><p>v-for指令：</p><p>​1.用于展示列表数据</p><p>​2.语法：v-for&#x3D;”(item,index) in xxx” :key&#x3D;”yyy”</p><p>​3.可遍历：数组、对象、字符串、指定次数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 遍历数组 --&gt;</span><br><span class="line">        &lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历对象 --&gt;</span><br><span class="line">        &lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(value,k) of car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">                &#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历字符串 --&gt;</span><br><span class="line">        &lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(char,index) of str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">        &lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(number,index) of 5&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                persons: [&#123;</span><br><span class="line">                        id: &#x27;001&#x27;,</span><br><span class="line">                        name: &#x27;张三&#x27;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;002&#x27;,</span><br><span class="line">                        name: &#x27;李四&#x27;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: &#x27;003&#x27;,</span><br><span class="line">                        name: &#x27;王五&#x27;,</span><br><span class="line">                        age: 20</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                car: &#123;</span><br><span class="line">                    name: &#x27;奥迪A8&#x27;,</span><br><span class="line">                    price: &#x27;70万&#x27;,</span><br><span class="line">                    color: &#x27;黑色&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                str: &#x27;hello&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本列表&quot;&gt;&lt;a href=&quot;#基本列表&quot; class=&quot;headerlink&quot; title=&quot;基本列表&quot;&gt;&lt;/a&gt;基本列表&lt;/h1&gt;&lt;p&gt;v-for指令：&lt;/p&gt;
&lt;p&gt;​	1.用于展示列表数据&lt;/p&gt;
&lt;p&gt;​	2.语法：v-for&amp;#x3D;”(item,i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>13_条件渲染</title>
    <link href="http://example.com/2022/07/13/13-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2022/07/13/13-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</id>
    <published>2022-07-12T18:58:46.000Z</published>
    <updated>2022-07-12T18:58:47.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p>1.v-if</p><p>​写法：</p><p>​（1）v-if&#x3D;”xxx”</p><p>​（2）v-else-if&#x3D;”xxx”</p><p>​（3）v-else&#x3D;”xxx”</p><p>​适用于：切换频率较低的场景</p><p>​特点：不展示的DOM原始直接被移除</p><p>​注意：v-if可以和v-else-if、v-else一起使用，但要求结构不能被打断</p><p>2.v-show</p><p>​写法：v-show&#x3D;”xxx”</p><p>​适用于：切换频率较高的场景</p><p>​特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p><p>3.备注：使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用v-if做条件渲染 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-else和v-else-if --&gt;</span><br><span class="line">        &lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- v-if与template的配合使用 --&gt;</span><br><span class="line">        &lt;template v-if=&quot;n === 1&quot;&gt;</span><br><span class="line">            &lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;北京&lt;/h2&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            n: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h1&gt;&lt;p&gt;1.v-if&lt;/p&gt;
&lt;p&gt;​	写法：&lt;/p&gt;
&lt;p&gt;​		（1）v-if&amp;#x3D;”xxx”&lt;/p&gt;
&lt;p&gt;​		（2）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>12_绑定样式</title>
    <link href="http://example.com/2022/07/13/12-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
    <id>http://example.com/2022/07/13/12-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-07-12T18:58:25.000Z</published>
    <updated>2022-07-12T18:58:25.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h1><p>绑定样式：</p><p>​1.class样式</p><p>​写法：class&#x3D;”xxx” xxx可以是字符串、对象、数组</p><p>​（1）字符串写法适用于：类名不确定，要动态获取</p><p>​（2）对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</p><p>​（3）数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</p><p>​2.style样式</p><p>​（1）:style&#x3D;”{fontSize:xxx}”其中xxx是动态值</p><p>​（2）:style&#x3D;”[a,b]”其中a、b是样式对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .basic &#123;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .happy &#123;</span><br><span class="line">            border: 4px solid red;</span><br><span class="line">            ;</span><br><span class="line">            background-color: rgba(255, 255, 0, 0.644);</span><br><span class="line">            background: linear-gradient(30deg, yellow, pink, orange, yellow);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .sad &#123;</span><br><span class="line">            border: 4px dashed rgb(2, 197, 2);</span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .normal &#123;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu1 &#123;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu2 &#123;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            text-shadow: 2px 2px 10px red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .atguigu3 &#123;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        &lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            mood: &#x27;normal&#x27;,</span><br><span class="line">            classArr: [&#x27;atguigu1&#x27;, &#x27;atguigu2&#x27;, &#x27;atguigu3&#x27;],</span><br><span class="line">            classObj: &#123;</span><br><span class="line">                atguigu1: false,</span><br><span class="line">                atguigu2: false,</span><br><span class="line">            &#125;,</span><br><span class="line">            styleObj: &#123;</span><br><span class="line">                fontSize: &#x27;40px&#x27;,</span><br><span class="line">                color: &#x27;red&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            styleObj2: &#123;</span><br><span class="line">                backgroundColor: &#x27;orange&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            styleArr: [&#123;</span><br><span class="line">                    fontSize: &#x27;40px&#x27;,</span><br><span class="line">                    color: &#x27;blue&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    backgroundColor: &#x27;gray&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeMood() &#123;</span><br><span class="line">                const arr = [&#x27;happy&#x27;, &#x27;sad&#x27;, &#x27;normal&#x27;]</span><br><span class="line">                const index = Math.floor(Math.random() * 3)</span><br><span class="line">                this.mood = arr[index]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绑定样式&quot;&gt;&lt;a href=&quot;#绑定样式&quot; class=&quot;headerlink&quot; title=&quot;绑定样式&quot;&gt;&lt;/a&gt;绑定样式&lt;/h1&gt;&lt;p&gt;绑定样式：&lt;/p&gt;
&lt;p&gt;​	1.class样式&lt;/p&gt;
&lt;p&gt;​		写法：class&amp;#x3D;”xxx” xxx可以是字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>11_天气案例-侦听属性</title>
    <link href="http://example.com/2022/07/13/11-%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2022/07/13/11-%E5%A4%A9%E6%B0%94%E6%A1%88%E4%BE%8B-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-12T18:57:52.000Z</published>
    <updated>2022-07-12T18:57:52.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h1><p>监视属性watch：</p><p>​1.当被监视的属性变化时，回调函数自动调用，进行相关操作</p><p>​2.监视的属性必须存在才能进行监视</p><p>​3.监视的两种写法：</p><p>​（1）new Vue时传入watch配置</p><p>​（2）通过vm.$watch监视</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // new Vue时传入watch配置</span><br><span class="line">        watch:&#123;</span><br><span class="line">            isHot:&#123;</span><br><span class="line">                immediate:true,</span><br><span class="line">                handler(oldValue,newValue)&#123;</span><br><span class="line">                    console.log(oldValue,newValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    // 通过vm.$watch监视</span><br><span class="line">     vm.$watch(&#x27;isHot&#x27;, &#123;</span><br><span class="line">         immediate: true, //初始化时让handler调用一下</span><br><span class="line">         //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">         handler(newValue, oldValue) &#123;</span><br><span class="line">             console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4.深度监视：</p><p>​（1）Vue中的watch默认不监测对象内部值的改变（一层）</p><p>​（2）配置deep:true可以监测对象内部值改变（多层）</p><p>​5.备注：</p><p>​（1）Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</p><p>​（2）使用watch时根据数据的具体结构，决定是否采用深度监视</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;numbers.a++&quot;&gt;点我让a+1&lt;/button&gt;</span><br><span class="line">        &lt;h3&gt;b的值是:&#123;&#123;numbers.b&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;numbers.b++&quot;&gt;点我让b+1&lt;/button&gt;</span><br><span class="line">        &#123;&#123;numbers.c.d.e&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">            numbers: &#123;</span><br><span class="line">                a: 1,</span><br><span class="line">                b: 1,</span><br><span class="line">                c: &#123;</span><br><span class="line">                    d: &#123;</span><br><span class="line">                        e: 100</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            isHot: &#123;</span><br><span class="line">                //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">                handler(newValue, oldValue) &#123;</span><br><span class="line">                    console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //监视多级结构中所有属性的变化</span><br><span class="line">            numbers: &#123;</span><br><span class="line">                deep: true,</span><br><span class="line">                handler() &#123;</span><br><span class="line">                    console.log(&#x27;numbers改变了&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isHot: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            info() &#123;</span><br><span class="line">                return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeWeather() &#123;</span><br><span class="line">                this.isHot = !this.isHot</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            //简写</span><br><span class="line">            /* isHot(newValue,oldValue)&#123;</span><br><span class="line">            console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">            &#125; */</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">//简写</span><br><span class="line">    /* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="line">    &#125;) */</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>6.computed与watch之间的区别：</p><p>​（1）computed能完成的功能，watch都可以完成</p><p>​（2）watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</p><p>​7.两个原则：</p><p>​（1）所有被Vue管理的函数，最好写成普通函数，这样this指向才是vm或组件实例对象</p><p>​（2）所有不被Vue管理的函数（定时器回调函数、ajax的回调函数等、promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">            fullName: &#x27;张-三&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            firstName(val) &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(this)</span><br><span class="line">                    this.fullName = val + &#x27;-&#x27; + this.lastName</span><br><span class="line">                &#125;, 1000);</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName(val) &#123;</span><br><span class="line">                this.fullName = this.firstName + &#x27;-&#x27; + val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;侦听属性&quot;&gt;&lt;a href=&quot;#侦听属性&quot; class=&quot;headerlink&quot; title=&quot;侦听属性&quot;&gt;&lt;/a&gt;侦听属性&lt;/h1&gt;&lt;p&gt;监视属性watch：&lt;/p&gt;
&lt;p&gt;​	1.当被监视的属性变化时，回调函数自动调用，进行相关操作&lt;/p&gt;
&lt;p&gt;​	2.监视</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>10_姓名案例-计算属性</title>
    <link href="http://example.com/2022/07/13/10-%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2022/07/13/10-%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-12T18:57:16.000Z</published>
    <updated>2022-07-12T18:57:17.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="姓名案例-计算属性"><a href="#姓名案例-计算属性" class="headerlink" title="姓名案例-计算属性"></a>姓名案例-计算属性</h1><p>计算属性：</p><p>​1.定义：要用的属性不存在，要通过已有属性计算得来</p><p>​2.原理：底层借助了Object.defineproperty方法提供的getter和setter</p><p>​3.get函数什么时候执行？</p><p>​（1）初次读取时会执行一次</p><p>​（2）当依赖的数据发生改变时会被再次调用</p><p>​4.get有什么作用？</p><p>​当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</p><p>​5.优势：与methods实现相比，内部有缓存机制（备用），效率更高，调试方便</p><p>​6.备注：</p><p>​（1）计算属性最终会出现在vm上，直接读取使用即可</p><p>​（2）如果计算属性要被修改，那必须写set函数响应修改，且set中要引起计算时依赖的数据发生改变。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        //完整写法</span><br><span class="line">        computed: &#123;</span><br><span class="line">            fullName:&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">            console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">            return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">            console.log(&#x27;set&#x27;,value)</span><br><span class="line">            const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">            this.firstName = arr[0]</span><br><span class="line">            this.lastName = arr[1]</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">        全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &#x27;张&#x27;,</span><br><span class="line">            lastName: &#x27;三&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">        //简写</span><br><span class="line">            fullName() &#123;</span><br><span class="line">                return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;姓名案例-计算属性&quot;&gt;&lt;a href=&quot;#姓名案例-计算属性&quot; class=&quot;headerlink&quot; title=&quot;姓名案例-计算属性&quot;&gt;&lt;/a&gt;姓名案例-计算属性&lt;/h1&gt;&lt;p&gt;计算属性：&lt;/p&gt;
&lt;p&gt;​	1.定义：要用的属性不存在，要通过已有属性计算得来&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>09_键盘事件</title>
    <link href="http://example.com/2022/07/13/09-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2022/07/13/09-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</id>
    <published>2022-07-12T18:56:31.000Z</published>
    <updated>2022-07-12T18:56:32.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><p>1.Vue中常用的按键别名：</p><ul><li>回车 &#x3D;&gt; enter</li><li>删除 &#x3D;&gt; delete（捕获“删除”和“退格”键）</li><li>退出 &#x3D;&gt; esc</li><li>空格 &#x3D;&gt; space</li><li>换行 &#x3D;&gt; tab（特殊，必须配合keydown去使用）</li><li>上 &#x3D;&gt; up</li><li>下 &#x3D;&gt; down</li><li>左 &#x3D;&gt; left</li><li>右 &#x3D;&gt; right</li></ul><p>2.vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合keydown使用：正常触发事件</li></ul><p>4.vue.config.keyCodes：自定义键名 &#x3D; 键码，可以去定制按键别名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keydown.huiche=&quot;showInfo&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">    Vue.config.keyCodes.huiche = 13 //定义了一个别名按键</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo(e) &#123;</span><br><span class="line">                // console.log(e.key,e.keyCode)</span><br><span class="line">                console.log(e.target.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;键盘事件&quot;&gt;&lt;a href=&quot;#键盘事件&quot; class=&quot;headerlink&quot; title=&quot;键盘事件&quot;&gt;&lt;/a&gt;键盘事件&lt;/h1&gt;&lt;p&gt;1.Vue中常用的按键别名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回车 &amp;#x3D;&amp;gt; enter&lt;/li&gt;
&lt;li&gt;删除 &amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>08_事件修饰符</title>
    <link href="http://example.com/2022/07/13/08-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://example.com/2022/07/13/08-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2022-07-12T18:56:05.000Z</published>
    <updated>2022-07-12T18:56:06.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p>Vue中的事件修饰符：</p><p>1.prevent：阻止默认事件（常用）</p><p>2.stop：阻止事件冒泡（常用）</p><p>3.once：事件只触发一次（常用）</p><p>4.capture：使用事件的捕获模式</p><p>5.self：只有event.target是当前操作的元素时才会触发事件</p><p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .demo1 &#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box1 &#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box2 &#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .list &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: peru;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件（常用） --&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 阻止事件冒泡（常用） --&gt;</span><br><span class="line">        &lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">            &lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">            &lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">        &lt;button @click.once=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用事件的捕获模式 --&gt;</span><br><span class="line">        &lt;div class=&quot;box1&quot; @click.capture=&quot;showMsg(1)&quot;&gt;</span><br><span class="line">            div1</span><br><span class="line">            &lt;div class=&quot;box2&quot; @click=&quot;showMsg(2)&quot;&gt;</span><br><span class="line">                div2</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br><span class="line">        &lt;div class=&quot;demo1&quot; @click.self=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="line">        &lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;</span><br><span class="line">            &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo(e) &#123;</span><br><span class="line">                alert(&#x27;同学你好！&#x27;)</span><br><span class="line">                // console.log(e.target)</span><br><span class="line">            &#125;,</span><br><span class="line">            showMsg(msg) &#123;</span><br><span class="line">                console.log(msg)</span><br><span class="line">            &#125;,</span><br><span class="line">            demo() &#123;</span><br><span class="line">                for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class="line">                    console.log(&#x27;#&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(&#x27;累坏了&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件修饰符&quot;&gt;&lt;a href=&quot;#事件修饰符&quot; class=&quot;headerlink&quot; title=&quot;事件修饰符&quot;&gt;&lt;/a&gt;事件修饰符&lt;/h1&gt;&lt;p&gt;Vue中的事件修饰符：&lt;/p&gt;
&lt;p&gt;1.prevent：阻止默认事件（常用）&lt;/p&gt;
&lt;p&gt;2.stop：阻止事件</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>07_事件的基本使用</title>
    <link href="http://example.com/2022/07/11/07-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/07/11/07-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-11T06:29:09.000Z</published>
    <updated>2022-07-11T06:29:09.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h1><p>事件的基本使用：</p><p>​1.使用v-on：xxx或@xxx绑定事件，其中xxx是事件名</p><p>​2.事件的回调需要配置在methods对象中，最终会在vm上</p><p>​3.methods中配置的函数，不要用箭头函数，否则this就不是vm了</p><p>​4.methods中配置的函数，都是被vue所管理的函数，this的指向是vm或组件实例对象</p><p>​5.@click&#x3D;”demo”和@click&#x3D;”demo($event)”效果一致，但后者可以传参</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span><br><span class="line">        &lt;button @click=&quot;showInfo1&quot;&gt;点我提示信息1（不传参）&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;showInfo2($event,66)&quot;&gt;点我提示信息2（传参）&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showInfo1(event) &#123;</span><br><span class="line">                // console.log(event.target.innerText)</span><br><span class="line">                // console.log(this) //此处的this是vm</span><br><span class="line">                alert(&#x27;同学你好！&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            showInfo2(event, number) &#123;</span><br><span class="line">                console.log(event, number)</span><br><span class="line">                // console.log(event.target.innerText)</span><br><span class="line">                // console.log(this) //此处的this是vm</span><br><span class="line">                alert(&#x27;同学你好！！&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件的基本使用&quot;&gt;&lt;a href=&quot;#事件的基本使用&quot; class=&quot;headerlink&quot; title=&quot;事件的基本使用&quot;&gt;&lt;/a&gt;事件的基本使用&lt;/h1&gt;&lt;p&gt;事件的基本使用：&lt;/p&gt;
&lt;p&gt;​	1.使用v-on：xxx或@xxx绑定事件，其中xxx是事件名&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>06_Vue中的数据代理</title>
    <link href="http://example.com/2022/07/11/06-Vue%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/07/11/06-Vue%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</id>
    <published>2022-07-11T06:28:44.000Z</published>
    <updated>2022-07-11T06:28:44.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h1><p>1.vue中的数据代理：通过vm对象来代理data对象中属性的操作</p><p>2.Vue中数据代理的好处：更加方便的操作data中的数据</p><p>3.基本原理：</p><p>​通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>​为每一个添加到vm上的属性都指定一个getter&#x2F;setter。</p><p>​在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            address: &#x27;宏福科技园&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中的数据代理&quot;&gt;&lt;a href=&quot;#Vue中的数据代理&quot; class=&quot;headerlink&quot; title=&quot;Vue中的数据代理&quot;&gt;&lt;/a&gt;Vue中的数据代理&lt;/h1&gt;&lt;p&gt;1.vue中的数据代理：通过vm对象来代理data对象中属性的操作&lt;/p&gt;
&lt;p&gt;2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>05_回顾Object.defineProperty方法</title>
    <link href="http://example.com/2022/07/11/05-%E5%9B%9E%E9%A1%BEObject-defineProperty%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/07/11/05-%E5%9B%9E%E9%A1%BEObject-defineProperty%E6%96%B9%E6%B3%95/</id>
    <published>2022-07-11T06:28:23.000Z</published>
    <updated>2022-07-11T06:28:23.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Object-defineProperty方法"><a href="#回顾Object-defineProperty方法" class="headerlink" title="回顾Object.defineProperty方法"></a>回顾Object.defineProperty方法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let number = 18</span><br><span class="line">let person = &#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(person,&#x27;age&#x27;,&#123;</span><br><span class="line">// value:18,</span><br><span class="line">// enumerable:true, //控制属性是否可以枚举，默认值是false</span><br><span class="line">// writable:true, //控制属性是否可以被修改，默认值是false</span><br><span class="line">// configurable:true //控制属性是否可以被删除，默认值是false</span><br><span class="line"></span><br><span class="line">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;有人读取age属性了&#x27;)</span><br><span class="line">return number</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;有人修改了age属性，且值是&#x27;,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// console.log(Object.keys(person))</span><br><span class="line"></span><br><span class="line">console.log(person)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回顾Object-defineProperty方法&quot;&gt;&lt;a href=&quot;#回顾Object-defineProperty方法&quot; class=&quot;headerlink&quot; title=&quot;回顾Object.defineProperty方法&quot;&gt;&lt;/a&gt;回顾Object.de</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>04_理解MVVM</title>
    <link href="http://example.com/2022/07/11/04-%E7%90%86%E8%A7%A3MVVM/"/>
    <id>http://example.com/2022/07/11/04-%E7%90%86%E8%A7%A3MVVM/</id>
    <published>2022-07-11T06:27:46.000Z</published>
    <updated>2022-07-11T06:27:49.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解MVVM"><a href="#理解MVVM" class="headerlink" title="理解MVVM"></a>理解MVVM</h1><p>MVVM模型</p><p>​1.M：模型（Model）：data中的数据</p><p>​2.V：视图（view）：模板代码</p><p>​3.VM：视图模型（viewModel）：vue实例</p><p>观察发现：</p><p>​1.data中所有的属性，最后都出现在vm身上</p><p>​2.vm身上所有的属性及vuew原型上所有属性，在vue模板中都可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            address: &#x27;北京&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(vm)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解MVVM&quot;&gt;&lt;a href=&quot;#理解MVVM&quot; class=&quot;headerlink&quot; title=&quot;理解MVVM&quot;&gt;&lt;/a&gt;理解MVVM&lt;/h1&gt;&lt;p&gt;MVVM模型&lt;/p&gt;
&lt;p&gt;​	1.M：模型（Model）：data中的数据&lt;/p&gt;
&lt;p&gt;​	2.V：视图</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>03_el与data的两种写法</title>
    <link href="http://example.com/2022/07/11/03-el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://example.com/2022/07/11/03-el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</id>
    <published>2022-07-11T06:27:19.000Z</published>
    <updated>2022-07-11T06:27:20.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h1><p>data与el的两种写法</p><p>​el有两种写法：</p><p>​1.new Vue时候配置el属性</p><p>​2.先创建vue实例，随后再通过vm.$mount(‘root’)指定el的值</p><p>​data有两种写法：</p><p>​1.对象式</p><p>​2.函数式</p><p>​目前哪种写法都可以，学习到组件时，data必须用函数式</p><p>注意：由vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是vue实例了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    //el的两种写法</span><br><span class="line">    /* const v = new Vue(&#123;</span><br><span class="line">    //el:&#x27;#root&#x27;, //第一种写法</span><br><span class="line">    data:&#123;</span><br><span class="line">    name:&#x27;尚硅谷&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(v)</span><br><span class="line">    v.$mount(&#x27;#root&#x27;) //第二种写法 */</span><br><span class="line"></span><br><span class="line">    //data的两种写法</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        //data的第一种写法：对象式</span><br><span class="line">        /* data:&#123;</span><br><span class="line">        name:&#x27;尚硅谷&#x27;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line">        //data的第二种写法：函数式</span><br><span class="line">        data() &#123;</span><br><span class="line">            console.log(&#x27;@@@&#x27;, this) //此处的this是Vue实例对象</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &#x27;尚硅谷&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;el与data的两种写法&quot;&gt;&lt;a href=&quot;#el与data的两种写法&quot; class=&quot;headerlink&quot; title=&quot;el与data的两种写法&quot;&gt;&lt;/a&gt;el与data的两种写法&lt;/h1&gt;&lt;p&gt;data与el的两种写法&lt;/p&gt;
&lt;p&gt;​	el有两种写法：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>02_数据绑定</title>
    <link href="http://example.com/2022/07/11/02-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://example.com/2022/07/11/02-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</id>
    <published>2022-07-11T06:26:09.000Z</published>
    <updated>2022-07-11T06:26:39.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>Vue中有2种数据绑定的方式：</p><p>单向数据绑定（v-bind）：数据只能从data流向页面</p><p>双向数据绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data</p><p>双向绑定一般都应用在表当元素上（如：input，select等）</p><p>v-model：value可以简写为v-model，因为v-model默认收集的就是value值]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 普通写法 --&gt;</span><br><span class="line">        &lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 简写 --&gt;</span><br><span class="line">        单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br /&gt;</span><br><span class="line">        双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">        &lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#x27;111&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据绑定&quot;&gt;&lt;a href=&quot;#数据绑定&quot; class=&quot;headerlink&quot; title=&quot;数据绑定&quot;&gt;&lt;/a&gt;数据绑定&lt;/h1&gt;&lt;p&gt;Vue中有2种数据绑定的方式：&lt;/p&gt;
&lt;p&gt;单向数据绑定（v-bind）：数据只能从data流向页面&lt;/p&gt;
&lt;p&gt;双向数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS面试题</title>
    <link href="http://example.com/2022/06/29/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/06/29/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-06-29T07:54:10.000Z</published>
    <updated>2022-06-29T07:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS面试题"><a href="#CSS面试题" class="headerlink" title="CSS面试题"></a>CSS面试题</h1><h2 id="1、css快速居中对齐"><a href="#1、css快速居中对齐" class="headerlink" title="1、css快速居中对齐"></a>1、css快速居中对齐</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.con&#123;</span><br><span class="line">margin:auto;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">display:flex;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;con&quot;&gt;</span><br><span class="line">&lt;h1&gt;快速居中对齐&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2、padding与margin有什么不同"><a href="#2、padding与margin有什么不同" class="headerlink" title="2、padding与margin有什么不同"></a>2、padding与margin有什么不同</h2><p>作用对象不同，padding是作用于自身的，margin是作用于外部对象的。</p><h2 id="3、vw与百分比有什么区别"><a href="#3、vw与百分比有什么区别" class="headerlink" title="3、vw与百分比有什么区别"></a>3、vw与百分比有什么区别</h2><p>在父元素宽度100%时没有区别。百分比有继承关系，会随着父元素的变化而变化；vw只和设备的宽度有关系，不随父元素的变化而变化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.p1&#123;</span><br><span class="line">width:50%;</span><br><span class="line">height:50px;</span><br><span class="line">background:green;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">width:50vw;</span><br><span class="line">height:50px;</span><br><span class="line">background:green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="4、行内元素与块级元素"><a href="#4、行内元素与块级元素" class="headerlink" title="4、行内元素与块级元素"></a>4、行内元素与块级元素</h2><p>行内元素不可以换行，不可以设置大小，其宽高由内容决定</p><p>块级元素独占一行，其宽度有继承关系，可以修改大小</p><h2 id="5、如何让谷歌浏览器支持小字体（小于12px）"><a href="#5、如何让谷歌浏览器支持小字体（小于12px）" class="headerlink" title="5、如何让谷歌浏览器支持小字体（小于12px）"></a>5、如何让谷歌浏览器支持小字体（小于12px）</h2><p>通过scale缩放到原来的多少倍</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.small-font&#123;</span><br><span class="line">transform:scale(0.8)</span><br><span class="line">-webkit-transform:scale(0.8)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS面试题&quot;&gt;&lt;a href=&quot;#CSS面试题&quot; class=&quot;headerlink&quot; title=&quot;CSS面试题&quot;&gt;&lt;/a&gt;CSS面试题&lt;/h1&gt;&lt;h2 id=&quot;1、css快速居中对齐&quot;&gt;&lt;a href=&quot;#1、css快速居中对齐&quot; class=&quot;header</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
</feed>
