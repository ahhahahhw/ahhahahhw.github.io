<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue应用层</title>
      <link href="/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue应用层"><a href="#Vue应用层" class="headerlink" title="Vue应用层"></a>Vue应用层</h1><h2 id="1、MVC与MVVM"><a href="#1、MVC与MVVM" class="headerlink" title="1、MVC与MVVM"></a>1、MVC与MVVM</h2><p>MVC缺点：前后端无法独立开发，前端没有自己的数据中心，太过依赖于后台</p><p>MVVM（前后端分离）：前端有自己的视图控制器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、v-model的原理"><a href="#2、v-model的原理" class="headerlink" title="2、v-model的原理"></a>2、v-model的原理</h2><p>v-model表现形式是数据双向绑定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input placeholder=&quot;请输入电话&quot; v-model=&quot;tel&quot;/&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;tel&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;vue&#x27;,</span><br><span class="line">tel:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、data-为什么是函数"><a href="#3、data-为什么是函数" class="headerlink" title="3、data()为什么是函数"></a>3、data()为什么是函数</h2><p>闭包，让每一个组件都有自己的私有作用域，确保各组件数据不会相互干扰，如果不用闭包的方法，采用纯对象的方法就会有干扰 &#x3D;&gt; let obj &#x3D; { }</p><h2 id="4、v-if与v-show"><a href="#4、v-if与v-show" class="headerlink" title="4、v-if与v-show"></a>4、v-if与v-show</h2><ul><li>v-if：不满足条件的话不会渲染dom，使用场景：单次判断，只需要判断一次</li><li>v-show的type只有true或false，它把display设置为none，它是隐藏dom，使用场景：多次切换，就不需要多次渲染，不会浪费性能，v-show不能用于权限操作</li></ul><h2 id="5、虚拟dom"><a href="#5、虚拟dom" class="headerlink" title="5、虚拟dom"></a>5、虚拟dom</h2><p>render负责把template里面的东西转化成真实dom<br>1.初始化的时候，将真实dom转化成虚拟dom<br>2.更新的时候做对比</p><ul><li>虚拟dom是在vue2.0中加入的</li><li>虚拟dom的本质就是一个js对象，它具备跨平台的特质</li></ul><p>vue的渲染过程：</p><ul><li><p>将真实dom转化成真实dom，也就是js对象</p></li><li><p>更新的时候用来做对比</p></li></ul><p><img src="/2022/06/28/Vue%E5%BA%94%E7%94%A8%E5%B1%82/vue1.png"></p><p>虚拟dom是如何提升vue的渲染效率？</p><ul><li>组件化</li><li>数据驱动</li></ul><p>虚拟dom可以局部更新节点数据，从直接操作dom的地方拿到两个js对象中去做比较，通过两个对象的对比，找出差异项进行更新，损耗小，优化性能。</p><h2 id="6、diff-中的patch"><a href="#6、diff-中的patch" class="headerlink" title="6、diff()中的patch()"></a>6、diff()中的patch()</h2><p>vue的渲染有两条线：</p><p>1.初始化：patch(container,vnode)，将虚拟dom转化为真实dom</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function createElement(vnode)&#123;</span><br><span class="line">//虚拟dom生成的三要素：目标元素，属性，子节点，目标元素是不可或缺的</span><br><span class="line">let tag = vnode.tag//目标元素ul</span><br><span class="line">let attrs = vnode.attrs || &#123;&#125;//属性</span><br><span class="line">let children = vnode.children || []//子节点</span><br><span class="line"></span><br><span class="line">if(!tag) &#123;</span><br><span class="line">retun null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建对应的dom</span><br><span class="line">let elem = document.createElement(tag)</span><br><span class="line">let attrName</span><br><span class="line">//给dom添加属性</span><br><span class="line">for(attrName in attrs)&#123;</span><br><span class="line">if(attrs.hasOwnProperty(attrName))&#123;</span><br><span class="line">elem.setAttribute(attrName,attrs[attrName])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将子元素添加到目标之上</span><br><span class="line">children.forEach(function(childVnode)&#123;</span><br><span class="line">elem.appendChild(createElement(childVnode))</span><br><span class="line">&#125;);</span><br><span class="line">return elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.更新：update(vnode,newVnode)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateChildren(vnode,newVnode) &#123;</span><br><span class="line">let children = vnode.cildren || []//现有节点</span><br><span class="line">let newChildren = newVnode.children || []//新节点</span><br><span class="line">children.forEach(function(childrenVnode,index)&#123;</span><br><span class="line">//循环每一项，通过index将新老节点进行对换</span><br><span class="line">let newChildrenVnode = newChildren[index]</span><br><span class="line">//如果第一层tag没有变化</span><br><span class="line">if(childrenVnode.tag === newChildrenVnode.tag)&#123;</span><br><span class="line">//继续进行深层次的对比，通过递归去比较</span><br><span class="line">updateChildren(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//将childrenVnode替换成newChildrenVnode</span><br><span class="line">replaceNode(childrenVnode,newChildrenVnode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6相关面试题</title>
      <link href="/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/06/28/ES6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6相关面试题"><a href="#ES6相关面试题" class="headerlink" title="ES6相关面试题"></a>ES6相关面试题</h1><h2 id="1、varconstlet"><a href="#1、varconstlet" class="headerlink" title="1、varconstlet"></a>1、varconstlet</h2><h3 id="var存在的问题"><a href="#var存在的问题" class="headerlink" title="var存在的问题"></a>var存在的问题</h3><ul><li>声明提升</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//var是先使用后定义</span><br><span class="line">console.log(num)//undefined</span><br><span class="line">var num = 123</span><br></pre></td></tr></table></figure><ul><li>变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num1 = 12</span><br><span class="line">var num1 = 34</span><br><span class="line">console.log(num1)//34</span><br></pre></td></tr></table></figure><ul><li>没有块级作用域</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn2() &#123;</span><br><span class="line">for(var i = 0;i &lt; 3;i++)&#123;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">console.log(i)//0123</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const定义的变量不能被修改，否则会报错</li><li>声明之后必须赋值，否则会报错</li><li>支持块级作用域，不存在声明提升和变量覆盖</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const DEMO = 123</span><br><span class="line">DEMO = 456</span><br><span class="line">console.log(DEMO)//报错</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let支持块级作用域，不存在声明提升和变量覆盖</li><li>定义的变量可以被修改</li><li>声明之后可以不赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//运用解构的方式互换两个值</span><br><span class="line">let a = 1;</span><br><span class="line">let b = 2;</span><br><span class="line">[a,b] = [b,a]</span><br><span class="line">console.log(a,b)//2,1</span><br></pre></td></tr></table></figure><h3 id="2、数组去重"><a href="#2、数组去重" class="headerlink" title="2、数组去重"></a>2、数组去重</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [12,43,23,12,43,55]</span><br><span class="line">let item = [...new Set(arr)]</span><br><span class="line">console.log(item)</span><br></pre></td></tr></table></figure><h3 id="3、promise的原理"><a href="#3、promise的原理" class="headerlink" title="3、promise的原理"></a>3、promise的原理</h3><p>promise的构造函数是同步执行的，.then()方法是异步执行的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">console.log(1)</span><br><span class="line">resolve();</span><br><span class="line">console.log(2)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">console.log(3)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(4)</span><br><span class="line">//1,2,4,3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题</title>
      <link href="/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、原型与原型链"><a href="#1、原型与原型链" class="headerlink" title="1、原型与原型链"></a>1、原型与原型链</h2><p>原型prototype，原型链_proto_ &#x3D;&gt; [[prototype]]</p><p>常规的数组或对象是没有原型的，原型是函数（function）所特有的；原型链是大家都有的。</p><p>原型链的查找规则（就近原则）：从当前实例属性去查找，如果找到了就返回，否则顺着原型链一层一层往上找，直到找到null为止，如果找到null都没有找到，就会报错。</p><p><img src="/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/1.png"></p><h2 id="二、JS防抖与节流"><a href="#二、JS防抖与节流" class="headerlink" title="二、JS防抖与节流"></a>二、JS防抖与节流</h2><p>1、防抖：在固定时间内，事件只允许发生一次</p><p>​应用场景：文本框实时查询输入的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input placeholder=&quot;请输入电话&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">let telInput = document.querySelector(&#x27;input&#x27;)</span><br><span class="line">telInput.addEventListener(&#x27;input&#x27;,antiShake(demo,2000))</span><br><span class="line">//防抖封装</span><br><span class="line">function antiShake(fn,wait)&#123;</span><br><span class="line">let timmeOut = null;</span><br><span class="line">return args =&gt; &#123;</span><br><span class="line">//如果已存在，则清除；否则创建定时器，把方法和等待时间传进去</span><br><span class="line">if(timeOut) clearTimeout(timeOut)</span><br><span class="line">timeOut = setTimeout(fn,wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function demo()&#123;</span><br><span class="line">console.log(&#x27;发起请求&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、节流：一定时间内的多个事件合为一个</p><p>​应用场景：提交表单，高频监听事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">background-color:green;</span><br><span class="line">width:200px;</span><br><span class="line">height:200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">let box = document.querySelector(&quot;.box&quot;)</span><br><span class="line">box.addEventListener(&quot;touchmove&quot;,throttle(demo,2000))</span><br><span class="line"></span><br><span class="line">function throttle(event,time)&#123;</span><br><span class="line">let timer = null</span><br><span class="line">return function() &#123;</span><br><span class="line">if(!timer) &#123;</span><br><span class="line">timer = setTimeout(() =&gt; &#123;</span><br><span class="line">event();</span><br><span class="line">timer = null; //置空</span><br><span class="line">&#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、JS闭包"><a href="#三、JS闭包" class="headerlink" title="三、JS闭包"></a>三、JS闭包</h2><p>1、闭包：方法里返回一个方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">let a1 = 1;</span><br><span class="line">return function()&#123;</span><br><span class="line">return a1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、闭包存在的意义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//作用域链</span><br><span class="line">let name = &quot;小明&quot;</span><br><span class="line">function fn2()&#123;</span><br><span class="line">let name = &quot;小白&quot;</span><br><span class="line">function fn3()&#123;</span><br><span class="line">let name = &quot;小红&quot;</span><br><span class="line">console.log(name)</span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><p>2.1 延长变量的生命周期</p><p>闭包会常驻内存 &#x3D;&gt; 慎用闭包，闭包的变量不会被回收</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//沟通内外部方法桥梁</span><br><span class="line">function outer() &#123;</span><br><span class="line">let a1 = 111;</span><br><span class="line">let a2 = 222;</span><br><span class="line">return function inner()&#123;</span><br><span class="line">return a1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn5() &#123;</span><br><span class="line">let getInnerData = outer();</span><br><span class="line">console.dir(getInnerData)</span><br><span class="line">&#125;</span><br><span class="line">fn5();</span><br></pre></td></tr></table></figure><p>2.2 创建私有环境</p><p>每一个闭包都拥有各自的属性和方法，都有独立的词法作用域，保持各自的独立性，这也诠释面向对象编程的好处–数据的隐藏和封装。</p><p>Vue data()为什么是一个函数？&#x3D;&gt; 闭包，不用闭包会使各个环境的数据相互干扰</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建计数器</span><br><span class="line">let makeCounter = function () &#123;</span><br><span class="line">let num = 0;</span><br><span class="line">function changeBy(val) &#123;</span><br><span class="line">num += val</span><br><span class="line">&#125;</span><br><span class="line">// 调用返回出去的方法</span><br><span class="line">return &#123;</span><br><span class="line">add: function()&#123;</span><br><span class="line">changeBy(1)</span><br><span class="line">&#125;,</span><br><span class="line">reduce: function() &#123;</span><br><span class="line">changeBy(-1)</span><br><span class="line">&#125;,</span><br><span class="line">value: function() &#123;</span><br><span class="line">return num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let counter1 = makeCounter()</span><br><span class="line">let counter2 = makeCounter()</span><br><span class="line"></span><br><span class="line">counter1.add()</span><br><span class="line">counter1.add()</span><br><span class="line"></span><br><span class="line">counter2.add()</span><br><span class="line">console.log(counter2.value())//1</span><br><span class="line">console.log(counter1.value())//2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newpapername修改内容</title>
      <link href="/2022/06/09/newpapername/"/>
      <url>/2022/06/09/newpapername/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加常用控件</span><br><span class="line">map.addControl(new BMap.ZoomControl());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决脚手架中全局变量访问的问题</span><br><span class="line">const BMap = window.BMapGL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取当前被点击项</span><br><span class="line">const target = e.domEvent.changedTouches[0];</span><br></pre></td></tr></table></figure><p>FilterMore 的 css 文件中</p><p>将 bottom：0px 改为 50px</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.footer &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 80px;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 50px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  z-index: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; BASE_URL &#125; from &quot;../../utils&quot;;</span><br><span class="line"></span><br><span class="line">import NavHeader from &quot;../../components/NavHeader&quot;;</span><br><span class="line">import HouseItem from &quot;../../components/HouseItem&quot;;</span><br><span class="line"></span><br><span class="line">import styles from &quot;./index.module.css&quot;;</span><br><span class="line"></span><br><span class="line">export default class Rent extends Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    // 出租房屋列表</span><br><span class="line">    list: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // // 获取已发布房源的列表数据</span><br><span class="line">  // async getHouseList() &#123;</span><br><span class="line">  //     const res = await API.get(&#x27;/user/houses&#x27;)</span><br><span class="line"></span><br><span class="line">  //     const &#123; status, body &#125; = res.data</span><br><span class="line">  //     if (status === 200) &#123;</span><br><span class="line">  //         this.setState(&#123;</span><br><span class="line">  //             list: body</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125; else &#123;</span><br><span class="line">  //         const &#123; history, location &#125; = this.props</span><br><span class="line">  //         history.replace(&#x27;/login&#x27;, &#123;</span><br><span class="line">  //             from: location</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">  // 获取最新资讯</span><br><span class="line">  async getNews() &#123;</span><br><span class="line">    const res = await axios.get(</span><br><span class="line">      &quot;http://localhost:8080/home/news?area=AREA%7C88cff55c-aaa4-e2e0&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      news: res.data.body,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  async componentDidMount() &#123;</span><br><span class="line">    this.getNews();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderHouseItem() &#123;</span><br><span class="line">    const &#123; list &#125; = this.state;</span><br><span class="line">    const &#123; history &#125; = this.props;</span><br><span class="line"></span><br><span class="line">    return list.map((item) =&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;HouseItem</span><br><span class="line">          key=&#123;item.houseCode&#125;</span><br><span class="line">          onClick=&#123;() =&gt; history.push(`/detail/$&#123;item.houseCode&#125;`)&#125;</span><br><span class="line">          src=&#123;BASE_URL + item.houseImg&#125;</span><br><span class="line">          title=&#123;item.title&#125;</span><br><span class="line">          desc=&#123;item.desc&#125;</span><br><span class="line">          tags=&#123;item.tags&#125;</span><br><span class="line">          price=&#123;item.price&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderRentList() &#123;</span><br><span class="line">    return &lt;div className=&#123;styles.houses&#125;&gt;&#123;this.renderHouseItem()&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&#123;styles.root&#125;&gt;</span><br><span class="line">        &lt;NavHeader&gt;资讯&lt;/NavHeader&gt;</span><br><span class="line"></span><br><span class="line">        &#123;this.renderRentList()&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 新闻发布后台管理系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/08/hello-world/"/>
      <url>/2022/06/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
