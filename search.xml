<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/06/28/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、原型与原型链"><a href="#1、原型与原型链" class="headerlink" title="1、原型与原型链"></a>1、原型与原型链</h2><p>原型prototype，原型链_proto_ &#x3D;&gt; [[prototype]]</p><p>常规的数组或对象是没有原型的，原型是函数（function）所特有的；原型链是大家都有的。</p><p>原型链的查找规则（就近原则）：从当前实例属性去查找，如果找到了就返回，否则顺着原型链一层一层往上找，直到找到null为止，如果找到null都没有找到，就会报错。</p><p><img src="C:\Users\22253\AppData\Roaming\Typora\typora-user-images\image-20220628003623431.png" alt="image-20220628003623431"></p><h2 id="二、JS防抖与节流"><a href="#二、JS防抖与节流" class="headerlink" title="二、JS防抖与节流"></a>二、JS防抖与节流</h2><p>1、防抖：在固定时间内，事件只允许发生一次</p><p>​应用场景：文本框实时查询输入的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input placeholder=&quot;请输入电话&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">let telInput = document.querySelector(&#x27;input&#x27;)</span><br><span class="line">telInput.addEventListener(&#x27;input&#x27;,antiShake(demo,2000))</span><br><span class="line">//防抖封装</span><br><span class="line">function antiShake(fn,wait)&#123;</span><br><span class="line">let timmeOut = null;</span><br><span class="line">return args =&gt; &#123;</span><br><span class="line">//如果已存在，则清除；否则创建定时器，把方法和等待时间传进去</span><br><span class="line">if(timeOut) clearTimeout(timeOut)</span><br><span class="line">timeOut = setTimeout(fn,wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function demo()&#123;</span><br><span class="line">console.log(&#x27;发起请求&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、节流：一定时间内的多个事件合为一个</p><p>​应用场景：提交表单，高频监听事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">background-color:green;</span><br><span class="line">width:200px;</span><br><span class="line">height:200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">let box = document.querySelector(&quot;.box&quot;)</span><br><span class="line">box.addEventListener(&quot;touchmove&quot;,throttle(demo,2000))</span><br><span class="line"></span><br><span class="line">function throttle(event,time)&#123;</span><br><span class="line">let timer = null</span><br><span class="line">return function() &#123;</span><br><span class="line">if(!timer) &#123;</span><br><span class="line">timer = setTimeout(() =&gt; &#123;</span><br><span class="line">event();</span><br><span class="line">timer = null; //置空</span><br><span class="line">&#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、JS闭包"><a href="#三、JS闭包" class="headerlink" title="三、JS闭包"></a>三、JS闭包</h2><p>1、闭包：方法里返回一个方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">let a1 = 1;</span><br><span class="line">return function()&#123;</span><br><span class="line">return a1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、闭包存在的意义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//作用域链</span><br><span class="line">let name = &quot;小明&quot;</span><br><span class="line">function fn2()&#123;</span><br><span class="line">let name = &quot;小白&quot;</span><br><span class="line">function fn3()&#123;</span><br><span class="line">let name = &quot;小红&quot;</span><br><span class="line">console.log(name)</span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><p>2.1 延长变量的生命周期</p><p>闭包会常驻内存 &#x3D;&gt; 慎用闭包，闭包的变量不会被回收</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//沟通内外部方法桥梁</span><br><span class="line">function outer() &#123;</span><br><span class="line">let a1 = 111;</span><br><span class="line">let a2 = 222;</span><br><span class="line">return function inner()&#123;</span><br><span class="line">return a1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn5() &#123;</span><br><span class="line">let getInnerData = outer();</span><br><span class="line">console.dir(getInnerData)</span><br><span class="line">&#125;</span><br><span class="line">fn5();</span><br></pre></td></tr></table></figure><p>2.2 创建私有环境</p><p>每一个闭包都拥有各自的属性和方法，都有独立的词法作用域，保持各自的独立性，这也诠释面向对象编程的好处–数据的隐藏和封装。</p><p>Vue data()为什么是一个函数？&#x3D;&gt; 闭包，不用闭包会使各个环境的数据相互干扰</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建计数器</span><br><span class="line">let makeCounter = function () &#123;</span><br><span class="line">let num = 0;</span><br><span class="line">function changeBy(val) &#123;</span><br><span class="line">num += val</span><br><span class="line">&#125;</span><br><span class="line">// 调用返回出去的方法</span><br><span class="line">return &#123;</span><br><span class="line">add: function()&#123;</span><br><span class="line">changeBy(1)</span><br><span class="line">&#125;,</span><br><span class="line">reduce: function() &#123;</span><br><span class="line">changeBy(-1)</span><br><span class="line">&#125;,</span><br><span class="line">value: function() &#123;</span><br><span class="line">return num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let counter1 = makeCounter()</span><br><span class="line">let counter2 = makeCounter()</span><br><span class="line"></span><br><span class="line">counter1.add()</span><br><span class="line">counter1.add()</span><br><span class="line"></span><br><span class="line">counter2.add()</span><br><span class="line">console.log(counter2.value())//1</span><br><span class="line">console.log(counter1.value())//2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/28/updateFileTime/"/>
      <url>/2022/06/28/updateFileTime/</url>
      
        <content type="html"><![CDATA[#!/usr/bin/env node/*批量更新修改时间博客自动更新文章的修改时间*/console.log('脚本开始运行..');var fs = require("fs"); //请求文件系统var file = "./txt"; //设置读取和写入的文件，当前目录下的test文件var RegExp=/(updated:\s*)((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))/g;fs.readdir("./",function(err,files){var len=files.length;var file=null;for(var i=0;i<len;i++){file=files[i];//console.log("读取文件：",file);if(file.indexOf(".md")>-1){console.log("正在处理文件：",file);writeFileTime(file,fs);}}});/*file:读取时间的文件以及写入内容的文件fs: 文件系统*/function writeFileTime(file,fs){fs.readFile(file, 'utf8',function(err, data) { //读取文件内容if (err) return console.log("读取文件内容错误：",err);//console.log("文件"+file+"的内容：",data);if(RegExp.test(data)){ //如果匹配到`updated`字段fs.stat(file,function(err, stats) { //读取文件信息，创建时间等if (err) return console.log("读取文件信息错误：",err);var updateds=data.match(RegExp);//console.log("updated数组:",updateds);if(updateds.length>1) console.log("文件"+file+"匹配到多处update字段");var updated=updateds[0].replace("updated: ","").replace(/-/g,"/");  //时间格式化为2018/01/29 21:33:30//console.log("updated:",updated);if(new Date(stats.mtime).getTime()-new Date(Date.parse(updated))>1000*60*5){ // 只要修改时间和文章内updated时间差大于1000毫秒*60*5=5分钟就触发更新var result= data.replace(RegExp,"updated: "+getFormatDate(stats.mtime)); //替换更新时间fs.writeFile(file, result, 'utf8',function(err) { //写入新的文件内容if (err) return console.log("写文件错误：",err);fs.utimes(file,new Date(stats.atime),new Date(stats.mtime),function(err){  //还原访问时间和修改时间if (err) return console.log("修改时间失败：",err);console.log(file,"成功更新时间");});});}});}});}/* timeStr:时间，格式可为："September 16,2016 14:15:05、 "September 16,2016"、"2016/09/16 14:15:05"、"2016/09/16"、 '2014-04-23T18:55:49'和毫秒 dateSeparator：年、月、日之间的分隔符，默认为"-"， timeSeparator：时、分、秒之间的分隔符，默认为":" */function getFormatDate(timeStr, dateSeparator, timeSeparator) {    dateSeparator = dateSeparator ? dateSeparator : "-";    timeSeparator = timeSeparator ? timeSeparator : ":";    var date = new Date(timeStr),            year = date.getFullYear(),// 获取完整的年份(4位,1970)            month = date.getMonth(),// 获取月份(0-11,0代表1月,用的时候记得加上1)            day = date.getDate(),// 获取日(1-31)            hour = date.getHours(),// 获取小时数(0-23)            minute = date.getMinutes(),// 获取分钟数(0-59)            seconds = date.getSeconds(),// 获取秒数(0-59)            Y = year + dateSeparator,            M = ((month + 1) > 9 ? (month + 1) : ('0' + (month + 1))) + dateSeparator,            D = (day > 9 ? day : ('0' + day)) + ' ',            h = (hour > 9 ? hour : ('0' + hour)) + timeSeparator,            m = (minute > 9 ? minute : ('0' + minute)) + timeSeparator,            s = (seconds > 9 ? seconds : ('0' + seconds)),            formatDate = Y + M + D + h + m + s;    return formatDate;}]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/28/writeupdatetime/"/>
      <url>/2022/06/28/writeupdatetime/</url>
      
        <content type="html"><![CDATA[#!/usr/bin/env node/*批量添加修改时间用于bolg初始化修改时间*/console.log('脚本开始运行..');var fs = require("fs"); //请求文件系统var file = "./txt"; //设置读取和写入的文件，当前目录下的test文件var RegExp=/(updated:\s*)((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))\r/g;fs.readdir("./",function(err,files){var len=files.length;var file=null;for(var i=0;i<len;i++){file=files[i];//console.log("读取文件：",file);if(file.indexOf(".md")>-1){console.log("正在处理文件：",file);writeFileTime(file,fs);}}    console.log("运行完毕！");});/*file:读取时间的文件以及写入内容的文件fs: 文件系统*/function writeFileTime(file,fs){fs.readFile(file, 'utf8',function(err, data) { //读取文件内容if (err) return console.log("读取文件内容错误：",err);//console.log("文件"+file+"的内容：",data);fs.stat(file,function(err, stats) { //读取文件信息，创建时间等   if (err) return console.log("读取文件信息错误：",err);//console.log("文件"+file+"的信息：",stats);  //打印文件的信息//console.log("创建时间是：",stats.mtime);//console.log("文件的创建时间是：",getFormatDate(stats.mtime));            var result= data.replace(RegExp,""); //替换更新时间result = result.replace(/categories:/g, "updated: "+getFormatDate(stats.mtime)+"\r"+"categories:");//data:替换为标准化日期//console.log("修改后文件内容为：",result);fs.writeFile(file, result, 'utf8',function(err) { //写入新的文件内容if (err) return console.log("写文件错误：",err);});});});}/* timeStr:时间，格式可为："September 16,2016 14:15:05、 "September 16,2016"、"2016/09/16 14:15:05"、"2016/09/16"、 '2014-04-23T18:55:49'和毫秒 dateSeparator：年、月、日之间的分隔符，默认为"-"， timeSeparator：时、分、秒之间的分隔符，默认为":" */function getFormatDate(timeStr, dateSeparator, timeSeparator) {    dateSeparator = dateSeparator ? dateSeparator : "-";    timeSeparator = timeSeparator ? timeSeparator : ":";    var date = new Date(timeStr),            year = date.getFullYear(),// 获取完整的年份(4位,1970)            month = date.getMonth(),// 获取月份(0-11,0代表1月,用的时候记得加上1)            day = date.getDate(),// 获取日(1-31)            hour = date.getHours(),// 获取小时数(0-23)            minute = date.getMinutes(),// 获取分钟数(0-59)            seconds = date.getSeconds(),// 获取秒数(0-59)            Y = year + dateSeparator,            M = ((month + 1) > 9 ? (month + 1) : ('0' + (month + 1))) + dateSeparator,            D = (day > 9 ? day : ('0' + day)) + ' ',            h = (hour > 9 ? hour : ('0' + hour)) + timeSeparator,            m = (minute > 9 ? minute : ('0' + minute)) + timeSeparator,            s = (seconds > 9 ? seconds : ('0' + seconds)),            formatDate = Y + M + D + h + m + s;    return formatDate;}]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>newpapername修改内容</title>
      <link href="/2022/06/09/newpapername/"/>
      <url>/2022/06/09/newpapername/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 添加常用控件</span><br><span class="line">map.addControl(new BMap.ZoomControl());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决脚手架中全局变量访问的问题</span><br><span class="line">const BMap = window.BMapGL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取当前被点击项</span><br><span class="line">const target = e.domEvent.changedTouches[0];</span><br></pre></td></tr></table></figure><p>FilterMore 的 css 文件中</p><p>将 bottom：0px 改为 50px</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.footer &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 80px;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 50px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  z-index: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; BASE_URL &#125; from &quot;../../utils&quot;;</span><br><span class="line"></span><br><span class="line">import NavHeader from &quot;../../components/NavHeader&quot;;</span><br><span class="line">import HouseItem from &quot;../../components/HouseItem&quot;;</span><br><span class="line"></span><br><span class="line">import styles from &quot;./index.module.css&quot;;</span><br><span class="line"></span><br><span class="line">export default class Rent extends Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    // 出租房屋列表</span><br><span class="line">    list: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // // 获取已发布房源的列表数据</span><br><span class="line">  // async getHouseList() &#123;</span><br><span class="line">  //     const res = await API.get(&#x27;/user/houses&#x27;)</span><br><span class="line"></span><br><span class="line">  //     const &#123; status, body &#125; = res.data</span><br><span class="line">  //     if (status === 200) &#123;</span><br><span class="line">  //         this.setState(&#123;</span><br><span class="line">  //             list: body</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125; else &#123;</span><br><span class="line">  //         const &#123; history, location &#125; = this.props</span><br><span class="line">  //         history.replace(&#x27;/login&#x27;, &#123;</span><br><span class="line">  //             from: location</span><br><span class="line">  //         &#125;)</span><br><span class="line">  //     &#125;</span><br><span class="line">  // &#125;</span><br><span class="line">  // 获取最新资讯</span><br><span class="line">  async getNews() &#123;</span><br><span class="line">    const res = await axios.get(</span><br><span class="line">      &quot;http://localhost:8080/home/news?area=AREA%7C88cff55c-aaa4-e2e0&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      news: res.data.body,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  async componentDidMount() &#123;</span><br><span class="line">    this.getNews();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderHouseItem() &#123;</span><br><span class="line">    const &#123; list &#125; = this.state;</span><br><span class="line">    const &#123; history &#125; = this.props;</span><br><span class="line"></span><br><span class="line">    return list.map((item) =&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;HouseItem</span><br><span class="line">          key=&#123;item.houseCode&#125;</span><br><span class="line">          onClick=&#123;() =&gt; history.push(`/detail/$&#123;item.houseCode&#125;`)&#125;</span><br><span class="line">          src=&#123;BASE_URL + item.houseImg&#125;</span><br><span class="line">          title=&#123;item.title&#125;</span><br><span class="line">          desc=&#123;item.desc&#125;</span><br><span class="line">          tags=&#123;item.tags&#125;</span><br><span class="line">          price=&#123;item.price&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderRentList() &#123;</span><br><span class="line">    return &lt;div className=&#123;styles.houses&#125;&gt;&#123;this.renderHouseItem()&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&#123;styles.root&#125;&gt;</span><br><span class="line">        &lt;NavHeader&gt;资讯&lt;/NavHeader&gt;</span><br><span class="line"></span><br><span class="line">        &#123;this.renderRentList()&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 新闻发布后台管理系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/08/hello-world/"/>
      <url>/2022/06/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
